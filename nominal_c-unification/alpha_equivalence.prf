(alpha_equivalence
 (alpha_TCC1 0
  (alpha_TCC1-1 nil 3624365226 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_term nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil))
 (alpha_TCC2 0
  (alpha_TCC2-1 nil 3624365226 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_term nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil))
 (alpha_TCC3 0
  (alpha_TCC3-1 nil 3624365226 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_term nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil))
 (alpha_TCC4 0
  (alpha_TCC4-1 nil 3624365226 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_term nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil))
 (alpha_TCC5 0
  (alpha_TCC5-1 nil 3624365226 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_term nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil))
 (alpha_TCC6 0
  (alpha_TCC6-1 nil 3755002788 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_term nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil))
 (alpha_TCC7 0
  (alpha_TCC7-1 nil 3755002788 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_term nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   shostak))
 (alpha_TCC8 0
  (alpha_TCC8-1 nil 3755004858 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_term nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil))
 (alpha_ord 0
  (alpha_ord-1 nil 3758225156 ("" (skeep) (("" (grind) nil nil)) nil)
   ((ord const-decl "upto(6)" term_adt nil)
    (alpha def-decl "bool" alpha_equivalence nil))
   shostak))
 (alpha_depth 0
  (alpha_depth-1 nil 3758034538
   ("" (measure-induct "depth(t)" "t")
    (("" (induct "x")
      (("1" (skeep)
        (("1" (skeep) (("1" (hide -1) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (skolem 1 ("pm" "V"))
        (("2" (flatten)
          (("2" (hide -1)
            (("2" (skeep)
              (("2" (expand "alpha" -1)
                (("2" (prop)
                  (("2" (lemma "term_times_eta")
                    (("2" (inst? -1)
                      (("2" (replace -1 1 rl)
                        (("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (flatten) (("3" (hide -1) (("3" (grind) nil nil)) nil))
        nil)
       ("4" (skolem 1 ("p1" "p2"))
        (("4" (flatten)
          (("4" (hide -1 -2)
            (("4" (skeep)
              (("4" (expand "alpha" -2)
                (("4" (prop)
                  (("4" (inst -1 "p1")
                    (("4" (prop)
                      (("1" (inst -1 "Delta" "term1(s)")
                        (("1" (prop)
                          (("1" (reveal -2)
                            (("1" (inst -1 "p2")
                              (("1"
                                (prop)
                                (("1"
                                  (inst -1 "Delta" "term2(s)")
                                  (("1"
                                    (prop)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (hide -1)
          (("5" (skeep)
            (("5" (expand "alpha" -2)
              (("5" (flatten)
                (("5" (lemma "term_abs_eta")
                  (("5" (inst -1 "s")
                    (("5" (replace -1 1 rl)
                      (("5" (expand "depth" 1)
                        (("5" (prop)
                          (("1" (inst -4 "abs2_var")
                            (("1" (prop)
                              (("1"
                                (inst -1 "Delta" "body(s)")
                                (("1" (prop) nil nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -4 "abs2_var")
                            (("2" (prop)
                              (("1"
                                (inst
                                 -1
                                 "Delta"
                                 "ext((: (abs1_var, abstr(s)) :))(body(s))")
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide -2 -3 -4 -5 1)
                                    (("1"
                                      (rewrite "ext_preserves_depth")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skolem 1 ("f" "ag"))
        (("6" (flatten)
          (("6" (hide -1)
            (("6" (skeep)
              (("6" (expand "alpha" -2)
                (("6" (prop)
                  (("6" (lemma "term_app_eta")
                    (("6" (inst -1 "s")
                      (("6" (replace -1 1 rl)
                        (("6" (expand "depth" 1)
                          (("6" (inst? -2)
                            (("6" (prop)
                              (("1"
                                (inst? -1)
                                (("1" (prop) nil nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skolem 1 ("f" "ag"))
        (("7" (flatten)
          (("7" (hide -1)
            (("7" (skeep)
              (("7" (expand "alpha" -2)
                (("7" (flatten)
                  (("7" (lemma "term_c_app_eta")
                    (("7" (inst -1 "s")
                      (("7" (case "ag = pair(term1(ag), term2(ag))")
                        (("1"
                          (case "c_arg(s) = pair(term1(c_arg(s)), term2(c_arg(s)))")
                          (("1" (prop)
                            (("1" (replace -5 1 rl t)
                              (("1"
                                (expand "depth" 1)
                                (("1"
                                  (inst -5 "ag")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst -1 "Delta" "c_arg(s)")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (replace -4 1)
                                          (("1"
                                            (replace -3 1)
                                            (("1"
                                              (expand "alpha" 1)
                                              (("1" (prop) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -5 1 rl)
                              (("2"
                                (expand "depth" 1)
                                (("2"
                                  (replace -4 1)
                                  (("2"
                                    (replace -3 1)
                                    (("2"
                                      (expand "depth" 1)
                                      (("2"
                                        (inst -6 "term1(ag)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst
                                             -1
                                             "Delta"
                                             "term2(c_arg(s))")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (reveal -2)
                                                (("1"
                                                  (inst -1 "term2(ag)")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "Delta"
                                                       "term1(c_arg(s))")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (typepred "c_arg(s)")
                              (("2"
                                (hide -1)
                                (("2"
                                  (lemma "term_pair_eta")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (typepred "ag")
                            (("2" (hide -1)
                              (("2"
                                (grind)
                                (("2"
                                  (lemma "term_pair_eta")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term_induction formula-decl nil term_adt nil)
    (susp? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_times_eta formula-decl nil term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term_abs_eta formula-decl nil term_adt nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (ext_preserves_depth formula-decl nil nominal_term nil)
    (ext def-decl "term" nominal_term nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (s skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (c_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (c_arg adt-accessor-decl "[(c_app?) -> pair]" term_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (pair adt-constructor-decl "[[term, term] -> (pair?)]" term_adt
     nil)
    (term_c_app_eta formula-decl nil term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (alpha def-decl "bool" alpha_equivalence nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (depth def-decl "nat" nominal_term nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_term nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (alpha_size 0
  (alpha_size-1 nil 3755540242
   ("" (measure-induct "size(t)" "t")
    (("" (skeep)
      (("" (skeep)
        (("" (expand "alpha" -2)
          (("" (lift-if)
            (("" (prop)
              (("1" (hide -3) (("1" (grind) nil nil)) nil)
               ("2" (hide -4 -5 1) (("2" (grind) nil nil)) nil)
               ("3" (grind) nil nil)
               ("4" (lemma "term_pair_eta")
                (("4" (inst-cp -1 "x")
                  (("4" (inst -1 "s")
                    (("4" (replace -1 4 rl t)
                      (("4" (replace -1 4 rl t)
                        (("4" (expand "size" 4)
                          (("4" (inst-cp -5 "term1(x)")
                            (("4" (prop)
                              (("1"
                                (inst -1 "Delta" "term1(s)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide -2 -3)
                                    (("1"
                                      (replace -1 4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -4 "term2(x)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst
                                               -1
                                               "Delta"
                                               "term2(s)")
                                              (("1" (prop) nil nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (reveal -8)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (reveal -6)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (inst -5 "body(x)")
                (("5" (prop)
                  (("1" (inst -1 "Delta" "body(s)")
                    (("1" (expand "size" 5) (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (assert) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("6" (expand "size" 6)
                (("6" (assert)
                  (("6" (inst -5 "body(x)")
                    (("6" (prop)
                      (("1"
                        (inst -1 "Delta"
                         "ext((: (abstr(x), abstr(s)) :))(body(s))")
                        (("1" (prop)
                          (("1" (lemma "ext_preserves_size")
                            (("1" (hide -3 -4 -5 -6 1 2 3 4 5)
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("7" (expand "size" 6)
                (("7" (assert)
                  (("7" (inst -5 "arg(x)") (("7" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("8" (expand "size" 7)
                (("8" (assert)
                  (("8" (expand "size" 7)
                    (("8" (inst-cp -5 "term1(c_arg(x))")
                      (("8" (prop)
                        (("1" (inst -1 "Delta" "term1(c_arg(s))")
                          (("1" (prop)
                            (("1" (assert)
                              (("1"
                                (replace -1 7 nil t)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -1)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("9" (expand "size" 7)
                (("9" (assert)
                  (("9" (expand "size" 7)
                    (("9" (hide -3 -4 1 2 3 4 5 6)
                      (("9" (inst-cp -3 "term1(c_arg(x))")
                        (("9" (prop)
                          (("1" (inst -1 "Delta" "term2(c_arg(s))")
                            (("1" (prop)
                              (("1"
                                (replace -1 1 nil t)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -3 "term2(c_arg(x))")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst
                                         -1
                                         "Delta"
                                         "term1(c_arg(s))")
                                        (("1" (prop) nil nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pair type-eq-decl nil term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (ext_preserves_size formula-decl nil nominal_term nil)
    (ext def-decl "term" nominal_term nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (c_arg adt-accessor-decl "[(c_app?) -> pair]" term_adt nil)
    (c_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (alpha def-decl "bool" alpha_equivalence nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_term nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_term nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (alpha_ext_invariance 0
  (alpha_ext_invariance-2 nil 3745912740
   ("" (induct "t")
    (("1" (grind) nil nil)
     ("2" (grind)
      (("2" (rewrite "act_append")
        (("2" (rewrite "act_append") (("2" (assert) nil nil)) nil))
        nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil))
    nil)
   ((pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (set type-eq-decl nil sets nil)
    (ds const-decl "set[atom]" atoms nil)
    (append def-decl "list[T]" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (act_append formula-decl nil atoms nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_term nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (ext def-decl "term" nominal_term nil)
    (alpha def-decl "bool" alpha_equivalence nil)
    (act def-decl "atom" atoms nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil freshness nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   nil)
  (alpha_ext_invariance-1 nil 3624717580
   ("" (induct t)
    (("1" (grind) nil nil)
     ("2" (grind)
      (("2" (rewrite act_append)
        (("2" (rewrite act_append) (("2" (assert) nil nil)) nil)) nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (grind) nil nil))
    nil)
   nil shostak))
 (alpha_ext_invariance_left 0
  (alpha_ext_invariance_left-3 "" 3758185577
   ("" (measure-induct "size(t)" "t")
    (("" (induct "x")
      (("1" (skeep)
        (("1" (skeep) (("1" (hide -1) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (skolem 1 ("pm" "V"))
        (("2" (flatten)
          (("2" (hide -1)
            (("2" (skeep)
              (("2" (expand "ext" 1)
                (("2" (expand "alpha" 1)
                  (("2" (assert)
                    (("2" (decompose-equality -1)
                      (("2" (grind)
                        (("1" (hide -3 -4 -5 2)
                          (("1" (hide -2)
                            (("1" (rewrite "act_append")
                              (("1"
                                (rewrite "act_append")
                                (("1"
                                  (reveal -5)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -2)
                          (("2" (hide -3 -4 -5 2)
                            (("2" (rewrite "act_append")
                              (("2"
                                (rewrite "act_append")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (prop) (("3" (hide -1) (("3" (grind) nil nil)) nil)) nil)
       ("4" (skolem 1 ("p1" "p2"))
        (("4" (flatten)
          (("4" (hide -1 -2)
            (("4" (expand "ext" 1)
              (("4" (skeep)
                (("4" (inst-cp -1 "p1")
                  (("4" (prop)
                    (("1" (inst-cp -2 "p2")
                      (("1" (prop)
                        (("1" (grind)
                          (("1" (hide -2 -3)
                            (("1" (reveal -7)
                              (("1"
                                (inst
                                 -1
                                 "Delta"
                                 "pi1"
                                 "pi2"
                                 "term2(s)")
                                (("1"
                                  (prop)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -2 -4)
                            (("2" (reveal -5)
                              (("2"
                                (inst
                                 -1
                                 "Delta"
                                 "pi1"
                                 "pi2"
                                 "term1(s)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (hide -1)
          (("5" (skeep)
            (("5" (expand "ext" 1)
              (("5" (expand "alpha" 1)
                (("5" (decompose-equality -2)
                  (("5" (grind)
                    (("1" (hide -1 -3 -4)
                      (("1" (reveal -7)
                        (("1" (reveal -5)
                          (("1" (inst -1 "Delta" "pi1" "pi2" "body(s)")
                            (("1" (assert)
                              (("1"
                                (hide -2 2)
                                (("1" (decompose-equality) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (reveal -4)
                      (("2" (hide -2 -3 -4 -5 2)
                        (("2" (decompose-equality) nil nil)) nil))
                      nil)
                     ("3" (hide -1 -3 -4 1)
                      (("3" (reveal -5)
                        (("3"
                          (inst -1 "Delta" "pi1" "pi2"
                           "ext((: (act(pi2)(abs1_var), abstr(s)) :))(body(s))")
                          (("3" (assert)
                            (("3" (hide -1 2)
                              (("3"
                                (reveal -8)
                                (("3" (decompose-equality) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but 1)
                      (("4" (reveal -8)
                        (("4" (decompose-equality) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skolem 1 ("f" "ag"))
        (("6" (flatten)
          (("6" (hide -1)
            (("6" (skeep)
              (("6" (expand "ext" 1)
                (("6" (expand "alpha" 1)
                  (("6" (inst -1 "ag")
                    (("6" (prop)
                      (("1" (inst -1 "Delta" "pi1" "pi2" "arg(s)")
                        (("1" (assert)
                          (("1" (hide -2) (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide -1) (("2" (grind) nil nil)) nil))
                        nil)
                       ("2" (hide -1 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skolem 1 ("f" "ag"))
        (("7" (flatten)
          (("7" (hide -1)
            (("7" (skeep)
              (("7" (expand "ext" 1)
                (("7" (expand "alpha" 1)
                  (("7"
                    (case "alpha(Delta)(ext(pi1)(term1(ag)), term1(c_arg(s))) = alpha(Delta)(ext(pi2)(term1(ag)), term1(c_arg(s)))")
                    (("1"
                      (case "alpha(Delta)(ext(pi1)(term2(ag)), term2(c_arg(s))) = alpha(Delta)(ext(pi2)(term2(ag)), term2(c_arg(s)))")
                      (("1"
                        (case "alpha(Delta)(ext(pi1)(term1(ag)), term2(c_arg(s))) = alpha(Delta)(ext(pi2)(term1(ag)), term2(c_arg(s)))")
                        (("1"
                          (case "alpha(Delta)(ext(pi1)(term2(ag)), term1(c_arg(s))) = alpha(Delta)(ext(pi2)(term2(ag)), term1(c_arg(s)))")
                          (("1" (hide -5 -6)
                            (("1" (assert) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 -3 2)
                            (("2" (inst -1 "term2(ag)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst? -1)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 -2 2)
                          (("2" (inst -1 "term1(ag)")
                            (("2" (prop)
                              (("1"
                                (inst
                                 -1
                                 "Delta"
                                 "pi1"
                                 "pi2"
                                 "term2(c_arg(s))")
                                (("1" (prop) nil nil))
                                nil)
                               ("2"
                                (hide -1 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 2)
                        (("2" (inst -1 "term2(ag)")
                          (("2" (prop)
                            (("1" (inst? -1) (("1" (assert) nil nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (inst -1 "term1(ag)")
                        (("2" (prop)
                          (("1" (inst? -1) (("1" (prop) nil nil)) nil)
                           ("2" (hide -1 2) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide -1 -2) (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term_induction formula-decl nil term_adt nil)
    (act_append formula-decl nil atoms nil)
    (a!1 skolem-const-decl "(ds(append(pi2, pm), p(s)))"
     alpha_equivalence nil)
    (pi2 skolem-const-decl "perm" alpha_equivalence nil)
    (pm skolem-const-decl "perm" alpha_equivalence nil)
    (pi1 skolem-const-decl "perm" alpha_equivalence nil)
    (s skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (a!1 skolem-const-decl "(ds(append(pi1, pm), p(s)))"
     alpha_equivalence nil)
    (p adt-accessor-decl "[(susp?) -> perm]" term_adt nil)
    (susp? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (append def-decl "list[T]" list_props nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ds const-decl "set[atom]" atoms nil)
    (/= const-decl "boolean" notequal nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (s skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (c_arg adt-accessor-decl "[(c_app?) -> pair]" term_adt nil)
    (c_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ext def-decl "term" nominal_term nil)
    (alpha def-decl "bool" alpha_equivalence nil)
    (act def-decl "atom" atoms nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_term nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_term nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)
  (yes "" 3757697521
   ("" (measure-induct "size(t)" "t")
    (("" (induct "x")
      (("1" (skeep)
        (("1" (skeep) (("1" (hide -1) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (skolem 1 ("pm" "V"))
        (("2" (flatten)
          (("2" (hide -1)
            (("2" (skeep)
              (("2" (expand "ext" 1)
                (("2" (expand "alpha" 1)
                  (("2" (assert)
                    (("2" (decompose-equality -1)
                      (("2" (grind)
                        (("1" (hide -3 -4 -5 2)
                          (("1" (hide -2)
                            (("1" (rewrite "act_append")
                              (("1"
                                (rewrite "act_append")
                                (("1"
                                  (reveal -5)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -2)
                          (("2" (hide -3 -4 -5 2)
                            (("2" (rewrite "act_append")
                              (("2"
                                (rewrite "act_append")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (prop) (("3" (hide -1) (("3" (grind) nil nil)) nil)) nil)
       ("4" (skolem 1 ("p1" "p2"))
        (("4" (flatten)
          (("4" (hide -1 -2)
            (("4" (expand "ext" 1)
              (("4" (skeep)
                (("4" (inst-cp -1 "p1")
                  (("4" (prop)
                    (("1" (inst-cp -2 "p2")
                      (("1" (prop)
                        (("1" (grind)
                          (("1" (hide -2 -3)
                            (("1" (reveal -7)
                              (("1"
                                (inst
                                 -1
                                 "Delta"
                                 "pi1"
                                 "pi2"
                                 "term2(s)")
                                (("1"
                                  (prop)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -2 -4)
                            (("2" (reveal -5)
                              (("2"
                                (inst
                                 -1
                                 "Delta"
                                 "pi1"
                                 "pi2"
                                 "term1(s)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (hide -1)
          (("5" (skeep)
            (("5" (expand "ext" 1)
              (("5" (expand "alpha" 1)
                (("5" (decompose-equality -2)
                  (("5" (grind)
                    (("1" (hide -1 -3 -4)
                      (("1" (reveal -7)
                        (("1" (reveal -5)
                          (("1" (inst -1 "Delta" "pi1" "pi2" "body(s)")
                            (("1" (assert)
                              (("1"
                                (hide -2 2)
                                (("1" (decompose-equality) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (reveal -4)
                      (("2" (hide -2 -3 -4 -5 2)
                        (("2" (decompose-equality) nil nil)) nil))
                      nil)
                     ("3" (hide -1 -3 -4 1)
                      (("3" (reveal -5)
                        (("3"
                          (inst -1 "Delta" "pi1" "pi2"
                           "ext((: (act(pi2)(abs1_var), abstr(s)) :))(body(s))")
                          (("3" (assert)
                            (("3" (hide -1 2)
                              (("3"
                                (reveal -8)
                                (("3" (decompose-equality) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but 1)
                      (("4" (reveal -8)
                        (("4" (decompose-equality) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (postpone) nil nil)
       ("7" (skolem 1 ("f" "ag"))
        (("7" (flatten)
          (("7" (hide -1)
            (("7" (skeep)
              (("7" (expand "ext" 1)
                (("7" (expand "alpha" 1)
                  (("7"
                    (case "alpha(Delta)(ext(pi1)(term1(ag)), term1(c_arg(s))) = alpha(Delta)(ext(pi2)(term1(ag)), term1(c_arg(s)))")
                    (("1"
                      (case "alpha(Delta)(ext(pi1)(term2(ag)), term2(c_arg(s))) = alpha(Delta)(ext(pi2)(term2(ag)), term2(c_arg(s)))")
                      (("1"
                        (case "alpha(Delta)(ext(pi1)(term1(ag)), term2(c_arg(s))) = alpha(Delta)(ext(pi2)(term1(ag)), term2(c_arg(s)))")
                        (("1"
                          (case "alpha(Delta)(ext(pi1)(term2(ag)), term1(c_arg(s))) = alpha(Delta)(ext(pi2)(term2(ag)), term1(c_arg(s)))")
                          (("1" (hide -5 -6)
                            (("1" (assert) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 -3 2)
                            (("2" (inst -1 "term2(ag)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst? -1)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 -2 2)
                          (("2" (inst -1 "term1(ag)")
                            (("2" (prop)
                              (("1"
                                (inst
                                 -1
                                 "Delta"
                                 "pi1"
                                 "pi2"
                                 "term2(c_arg(s))")
                                (("1" (prop) nil nil))
                                nil)
                               ("2"
                                (hide -1 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 2)
                        (("2" (inst -1 "term2(ag)")
                          (("2" (prop)
                            (("1" (inst? -1) (("1" (assert) nil nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (inst -1 "term1(ag)")
                        (("2" (prop)
                          (("1" (inst? -1) (("1" (prop) nil nil)) nil)
                           ("2" (hide -1 2) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide -1 -2) (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fresh_context type-eq-decl nil freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (act def-decl "atom" atoms nil)
    (alpha def-decl "bool" alpha_equivalence nil)
    (ext def-decl "term" nominal_term nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (variable type-eq-decl nil nominal_term nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (size def-decl "nat" nominal_term nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (c_arg adt-accessor-decl "[(c_app?) -> pair]" term_adt nil)
    (c_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (p adt-accessor-decl "[(susp?) -> perm]" term_adt nil)
    (susp? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (append def-decl "list[T]" list_props nil)
    (set type-eq-decl nil sets nil)
    (ds const-decl "set[atom]" atoms nil)
    (/= const-decl "boolean" notequal nil)
    (act_append formula-decl nil atoms nil)
    (term_induction formula-decl nil term_adt nil))
   shostak)
  (alpha_ext_invariance_left-2 nil 3745912821
   ("" (skolem 1 ("Delta" "pi1" "pi2" "_" "_"))
    (("" (induct "t")
      (("1" (grind) nil nil)
       ("2" (skeep*)
        (("2" (expand* "ext" "alpha")
          (("2" (iff)
            (("2" (split)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (typepred "a")
                      (("1" (inst -4 "a")
                        (("1" (expand "ds")
                          (("1" (rewrite "act_append")
                            (("1" (rewrite "act_append")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (typepred "a")
                      (("2" (inst -4 "a")
                        (("2" (expand "ds")
                          (("2" (rewrite "act_append")
                            (("2" (rewrite "act_append")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil) ("4" (grind) nil nil)
       ("5" (grind) nil nil) ("6" (grind) nil nil))
      nil))
    nil)
   nil nil)
  (alpha_ext_invariance_left-1 nil 3625311813
   ("" (skolem 1 (delta pi1 pi2 "_" "_"))
    (("" (induct t)
      (("1" (grind) nil nil)
       ("2" (skeep*)
        (("2" (expand* ext alpha)
          (("2" (iff)
            (("2" (split)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (typepred a)
                      (("1" (inst -4 a)
                        (("1" (expand ds)
                          (("1" (rewrite act_append)
                            (("1" (rewrite act_append)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (typepred a)
                      (("2" (inst -4 a)
                        (("2" (expand ds)
                          (("2" (rewrite act_append)
                            (("2" (rewrite act_append)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil) ("4" (grind) nil nil)
       ("5" (grind) nil nil) ("6" (grind) nil nil))
      nil))
    nil)
   nil shostak))
 (alpha_ext_invariance_right 0
  (alpha_ext_invariance_right-2 nil 3745913157
   ("" (measure-induct "size(s)" "s")
    (("" (induct "x")
      (("1" (skeep) (("1" (grind) nil nil)) nil)
       ("2" (skolem 1 ("pm" "V"))
        (("2" (flatten)
          (("2" (hide -1)
            (("2" (skeep)
              (("2" (expand "ext")
                (("2" (grind)
                  (("1" (lemma "alpha_ord")
                    (("1" (inst? -1)
                      (("1" (prop)
                        (("1" (case "susp?(t)")
                          (("1" (lemma "term_times_eta")
                            (("1" (inst? -1)
                              (("1"
                                (replace -1 -5 rl)
                                (("1"
                                  (replace -1 1 rl)
                                  (("1"
                                    (hide -1 -2 -3)
                                    (("1"
                                      (expand "alpha")
                                      (("1"
                                        (decompose-equality -1)
                                        (("1"
                                          (grind)
                                          (("1"
                                            (hide -3 2)
                                            (("1"
                                              (rewrite "act_append")
                                              (("1"
                                                (rewrite "act_append")
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (reveal -4)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3 2) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "susp?(t)")
                    (("1" (lemma "term_times_eta")
                      (("1" (inst? -1)
                        (("1" (replace -1 -4 rl)
                          (("1" (replace -1 1 rl)
                            (("1" (hide -1 -2)
                              (("1"
                                (decompose-equality -1)
                                (("1"
                                  (grind)
                                  (("1"
                                    (hide -1 -2 -3 2)
                                    (("1"
                                      (rewrite "act_append")
                                      (("1"
                                        (rewrite "act_append")
                                        (("1"
                                          (reveal -5)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 2)
                      (("2" (lemma "alpha_ord") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (flatten) (("3" (skeep) (("3" (grind) nil nil)) nil)) nil)
       ("4" (skolem 1 ("p1" "p2"))
        (("4" (flatten)
          (("4" (hide -1 -2)
            (("4" (skeep)
              (("4" (case "pair?(t)")
                (("1" (lemma "term_pair_eta")
                  (("1" (inst? -1)
                    (("1" (replace -1 1 rl)
                      (("1" (expand "ext" 1)
                        (("1" (hide -1 -2 -3)
                          (("1" (decompose-equality -1)
                            (("1" (grind)
                              (("1"
                                (hide -2)
                                (("1"
                                  (reveal -4)
                                  (("1"
                                    (inst -1 "p2")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst
                                         -1
                                         "Delta"
                                         "pi1"
                                         "pi2"
                                         "term2(t)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (decompose-equality 1)
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -3)
                                (("2"
                                  (reveal -4)
                                  (("2"
                                    (inst -1 "p1")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst
                                         -1
                                         "Delta"
                                         "pi1"
                                         "pi2"
                                         "term1(t)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (decompose-equality 1)
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 -2 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -2)
                                (("3"
                                  (reveal -4)
                                  (("3"
                                    (inst -1 "p2")
                                    (("3"
                                      (prop)
                                      (("1"
                                        (inst
                                         -1
                                         "Delta"
                                         "pi1"
                                         "pi2"
                                         "term2(t)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (decompose-equality 1)
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide -3)
                                (("4"
                                  (reveal -4)
                                  (("4"
                                    (inst -1 "p1")
                                    (("4"
                                      (prop)
                                      (("1"
                                        (inst
                                         -1
                                         "Delta"
                                         "pi1"
                                         "pi2"
                                         "term1(t)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (decompose-equality 1)
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "ext" 2)
                  (("2" (hide -1 -2)
                    (("2" (grind)
                      (("1" (hide 2)
                        (("1" (lemma "alpha_ord")
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (lemma "alpha_ord")
                        (("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (hide -1)
          (("5" (skeep)
            (("5" (expand "ext" 1)
              (("5" (case "abs?(t)")
                (("1" (lemma "term_abs_eta")
                  (("1" (inst? -1)
                    (("1" (replace -1 1 rl)
                      (("1" (hide -1 -2 -3)
                        (("1" (grind)
                          (("1" (hide -2)
                            (("1" (reveal -4)
                              (("1"
                                (inst -1 "abs2_var")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst
                                     -1
                                     "Delta"
                                     "pi1"
                                     "pi2"
                                     "body(t)")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -2 1)
                            (("2" (reveal -4)
                              (("2"
                                (rewrite "ext_append" :dir rl)
                                (("2"
                                  (rewrite "ext_append" :dir rl)
                                  (("2"
                                    (inst -1 "abs2_var")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst
                                         -1
                                         "Delta"
                                         "cons((abstr(t), act(pi2)(abs1_var)), pi1)"
                                         "cons((abstr(t), act(pi2)(abs1_var)), pi2)"
                                         "body(t)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2 2)
                                            (("1"
                                              (grind)
                                              (("1"
                                                (decompose-equality 1)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 -2 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -3 1)
                            (("3" (lemma "ext_reverse_fresh")
                              (("3"
                                (inst? -1)
                                (("3"
                                  (replace -1 -3)
                                  (("3"
                                    (lemma "ext_reverse_fresh")
                                    (("3"
                                      (inst
                                       -1
                                       "Delta"
                                       "abstr(t)"
                                       "pi2"
                                       "abs2_var")
                                      (("3"
                                        (replace -1 1)
                                        (("3"
                                          (hide -1 -2)
                                          (("3"
                                            (lemma
                                             "act_reverse_invariance")
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide -2)
                            (("4" (reveal -4)
                              (("4"
                                (inst -1 "abs2_var")
                                (("4"
                                  (prop)
                                  (("1"
                                    (inst
                                     -1
                                     "Delta"
                                     "pi1"
                                     "pi2"
                                     "body(t)")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (hide -2 1)
                            (("5" (reveal -4)
                              (("5"
                                (rewrite "ext_append" :dir rl)
                                (("5"
                                  (rewrite "ext_append" :dir rl)
                                  (("5"
                                    (inst -1 "abs2_var")
                                    (("5"
                                      (prop)
                                      (("1"
                                        (inst
                                         -1
                                         "Delta"
                                         "cons((abstr(t), act(pi2)(abs1_var)), pi2)"
                                         "cons((abstr(t), act(pi2)(abs1_var)), pi1)"
                                         "body(t)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2 2)
                                            (("1"
                                              (decompose-equality 1)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("6" (hide -1 -3 1)
                            (("6" (lemma "ext_reverse_fresh")
                              (("6"
                                (inst-cp
                                 -1
                                 "Delta"
                                 "abstr(t)"
                                 "pi2"
                                 "abs2_var")
                                (("6"
                                  (inst
                                   -1
                                   "Delta"
                                   "abstr(t)"
                                   "pi1"
                                   "abs2_var")
                                  (("6"
                                    (replace -1 1)
                                    (("6"
                                      (replace -2 -3)
                                      (("6"
                                        (hide -1 -2)
                                        (("6"
                                          (reveal -4)
                                          (("6"
                                            (lemma
                                             "act_reverse_invariance")
                                            (("6" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 -2)
                  (("2" (grind)
                    (("1" (lemma "alpha_ord") (("1" (grind) nil nil))
                      nil)
                     ("2" (lemma "alpha_ord")
                      (("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skolem 1 ("f" "ag"))
        (("6" (flatten)
          (("6" (hide -1)
            (("6" (skeep)
              (("6" (hide -1)
                (("6" (case "app?(t)")
                  (("1" (lemma "term_app_eta")
                    (("1" (inst -1 "t")
                      (("1" (replace -1 1 rl)
                        (("1" (hide -1 -2)
                          (("1" (grind)
                            (("1" (reveal -4)
                              (("1"
                                (inst -1 "ag")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst
                                     -1
                                     "Delta"
                                     "pi1"
                                     "pi2"
                                     "arg(t)")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (reveal -4)
                              (("2"
                                (inst -1 "ag")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst
                                     -1
                                     "Delta"
                                     "pi1"
                                     "pi2"
                                     "arg(t)")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1)
                    (("2" (grind)
                      (("1" (lemma "alpha_ord") (("1" (grind) nil nil))
                        nil)
                       ("2" (lemma "alpha_ord")
                        (("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skolem 1 ("f" "ag"))
        (("7" (flatten)
          (("7" (hide -1)
            (("7" (skeep)
              (("7" (expand "ext" 1)
                (("7" (case "c_app?(t)")
                  (("1" (lemma "term_c_app_eta")
                    (("1" (inst -1 "t")
                      (("1" (replace -1 1 rl)
                        (("1" (hide -1 -2 -3)
                          (("1" (decompose-equality -1)
                            (("1" (expand "alpha" 1)
                              (("1"
                                (case
                                 "alpha(Delta)(term1(c_arg(t)), ext(pi1)(term1(ag))) = alpha(Delta)(term1(c_arg(t)), ext(pi2)(term1(ag)))")
                                (("1"
                                  (case
                                   "alpha(Delta)(term2(c_arg(t)), ext(pi1)(term2(ag))) = alpha(Delta)(term2(c_arg(t)), ext(pi2)(term2(ag)))")
                                  (("1"
                                    (case
                                     "alpha(Delta)(term1(c_arg(t)), ext(pi1)(term2(ag))) = alpha(Delta)(term1(c_arg(t)), ext(pi2)(term2(ag)))")
                                    (("1"
                                      (case
                                       "alpha(Delta)(term2(c_arg(t)), ext(pi1)(term1(ag))) = alpha(Delta)(term2(c_arg(t)), ext(pi2)(term1(ag)))")
                                      (("1"
                                        (hide -5)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (hide -1 -2 -3 2)
                                        (("2"
                                          (reveal -6)
                                          (("2"
                                            (inst -1 "term1(ag)")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (inst
                                                 -1
                                                 "Delta"
                                                 "pi1"
                                                 "pi2"
                                                 "term2(c_arg(t))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (decompose-equality
                                                     1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 -2 2)
                                      (("2"
                                        (reveal -5)
                                        (("2"
                                          (inst -1 "term2(ag)")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (inst
                                               -1
                                               "Delta"
                                               "pi1"
                                               "pi2"
                                               "term1(c_arg(t))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (decompose-equality
                                                   1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1 2)
                                    (("2"
                                      (reveal -4)
                                      (("2"
                                        (inst -1 "term2(ag)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst
                                             -1
                                             "Delta"
                                             "pi1"
                                             "pi2"
                                             "term2(c_arg(t))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (decompose-equality 1)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (reveal -3)
                                    (("2"
                                      (inst -1 "term1(ag)")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (inst
                                           -1
                                           "Delta"
                                           "pi1"
                                           "pi2"
                                           "term1(c_arg(t))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (decompose-equality 1)
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide -1)
                                  (("3"
                                    (reveal -3)
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 -2)
                    (("2" (grind)
                      (("1" (lemma "alpha_ord") (("1" (grind) nil nil))
                        nil)
                       ("2" (lemma "alpha_ord")
                        (("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term_induction formula-decl nil term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (* adt-constructor-decl "[[perm, variable] -> (susp?)]" term_adt
       nil)
    (susp? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (t skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (/= const-decl "boolean" notequal nil)
    (ds const-decl "set[atom]" atoms nil)
    (V adt-accessor-decl "[(susp?) -> variable]" term_adt nil)
    (set type-eq-decl nil sets nil)
    (p adt-accessor-decl "[(susp?) -> perm]" term_adt nil)
    (pi1 skolem-const-decl "perm" alpha_equivalence nil)
    (a!1 skolem-const-decl "(ds(p(t), append(pi2, pm)))"
     alpha_equivalence nil)
    (pm skolem-const-decl "perm" alpha_equivalence nil)
    (pi2 skolem-const-decl "perm" alpha_equivalence nil)
    (act_append formula-decl nil atoms nil)
    (term_times_eta formula-decl nil term_adt nil)
    (ord const-decl "upto(6)" term_adt nil)
    (alpha_ord formula-decl nil alpha_equivalence nil)
    (a!1 skolem-const-decl "(ds(p(t), append(pi1, pm)))"
     alpha_equivalence nil)
    (pair adt-constructor-decl "[[term, term] -> (pair?)]" term_adt
     nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (t skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (abs adt-constructor-decl "[[atom, term] -> (abs?)]" term_adt nil)
    (term_abs_eta formula-decl nil term_adt nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (ext_append formula-decl nil nominal_term nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ext_reverse_fresh formula-decl nil freshness nil)
    (act_reverse_invariance formula-decl nil atoms nil)
    (t skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (t skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (app adt-constructor-decl "[[symbol, term] -> (app?)]" term_adt
     nil)
    (c_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (t skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (c_arg adt-accessor-decl "[(c_app?) -> pair]" term_adt nil)
    (term_c_app_eta formula-decl nil term_adt nil)
    (c_app adt-constructor-decl
     "[[commutative_symbol, pair] -> (c_app?)]" term_adt nil)
    (ext def-decl "term" nominal_term nil)
    (alpha def-decl "bool" alpha_equivalence nil)
    (act def-decl "atom" atoms nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_term nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_term nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (alpha_ext_invariance_right-1 nil 3625312300
   ("" (skolem 1 (delta "_" "_" "_" "_"))
    (("" (lemma ext_preserves_type)
      (("" (induct t)
        (("1" (grind) nil nil)
         ("2" (skeep*)
          (("2" (inst-cp -2 pi1 s)
            (("2" (inst -2 pi2 s)
              (("2" (expand* alpha ord)
                (("2" (iff)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (lift-if -6)
                          (("1" (assert)
                            (("1" (prop)
                              (("1"
                                (assert)
                                (("1"
                                  (lift-if)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand ext (-3 2))
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (skeep)
                                (("3"
                                  (typepred a)
                                  (("3"
                                    (inst -5 a)
                                    (("3"
                                      (expand ds)
                                      (("3"
                                        (expand ext (-1 1))
                                        (("3"
                                          (assert)
                                          (("3"
                                            (rewrite act_append)
                                            (("3"
                                              (rewrite act_append)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (lift-if -5)
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (expand ext 2)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (expand ext (-3 2))
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (skeep)
                                (("3"
                                  (typepred a)
                                  (("3"
                                    (inst -5 a)
                                    (("3"
                                      (expand ext (-1 -6 1))
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand ds)
                                          (("3"
                                            (rewrite act_append)
                                            (("3"
                                              (rewrite act_append)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (grind) nil nil)
         ("4" (skeep*)
          (("4" (inst-cp -4 pi1 s)
            (("4" (inst -4 pi2 s)
              (("4" (expand alpha 1)
                (("4" (iff)
                  (("4" (split)
                    (("1" (expand ord -5)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1"
                                  (expand ext 4)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand ext (-3 4))
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -5 pi1 pi2 "term1(s)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand ext (-4 4))
                                  (("3"
                                    (assert)
                                    (("3"
                                      (inst -6 pi1 pi2 "term2(s)")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand ord -4)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (prop)
                                (("1"
                                  (expand ext 4)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand ext (-3 4))
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -5 pi1 pi2 "term1(s)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand ext (-4 4))
                                  (("3"
                                    (assert)
                                    (("3"
                                      (inst -6 pi1 pi2 "term2(s)")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (skeep*)
          (("5" (inst-cp -3 pi1 s)
            (("5" (inst -3 pi2 s)
              (("5" (expand alpha 1)
                (("5" (iff)
                  (("5" (case "abs?(s)")
                    (("1" (expand ext 1 (1 2 3 4 6 7 8 9 10 11 13 14))
                      (("1" (assert)
                        (("1"
                          (inst-cp -2
                           "append(cons((abs1_var, act(pi2)(abstr(s))), null),pi1)"
                           "append(cons((abs1_var, act(pi2)(abstr(s))), null), pi2)"
                           "body(s)")
                          (("1" (inst -2 pi1 pi2 "body(s)")
                            (("1"
                              (lemma ds_fresh_invariance
                               (delta
                                delta
                                a
                                "abs1_var"
                                pi1
                                pi1
                                pi2
                                pi2
                                t
                                "body(s)"))
                              (("1"
                                (replace -5)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (replaces -2)
                                    (("1"
                                      (split -2)
                                      (("1"
                                        (rewrite ext_append)
                                        (("1"
                                          (rewrite ext_append)
                                          (("1"
                                            (replaces -1)
                                            (("1" (prop) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (decompose-equality 1)
                                          (("2"
                                            (rewrite act_append)
                                            (("2"
                                              (rewrite act_append)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (hide -2 -4 1) (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide -2 -5 1) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (skeep*)
          (("6" (expand alpha 1)
            (("6" (case "app?(s)")
              (("1" (inst -2 pi1 pi2 "arg(s)")
                (("1" (expand ext 1)
                  (("1" (assert) (("1" (replaces -2) nil nil)) nil))
                  nil))
                nil)
               ("2" (iff)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (hide -2 -3 -4 1)
                      (("1" (inst -3 pi1 s) (("1" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide -2 -3 -4 1)
                      (("2" (inst -3 pi2 s) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (alpha_reflexivity 0
  (alpha_reflexivity-2 nil 3745913225
   ("" (skeep)
    ((""
      (lemma "alpha_ext_invariance"
       ("pi1" "null[[atom,atom]]" "pi2" "null[[atom,atom]]" "Delta"
        "Delta" "t" "t"))
      (("" (rewrite "ext_identity") nil nil)) nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_term nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (alpha_ext_invariance formula-decl nil alpha_equivalence nil)
    (ext_identity formula-decl nil nominal_term nil))
   nil)
  (alpha_reflexivity-1 nil 3624366434
   ("" (skeep)
    ((""
      (lemma alpha_ext_invariance
       (pi1 "null[[atom,atom]]" pi2 "null[[atom,atom]]" delta delta t
        t))
      (("" (rewrite ext_identity) nil nil)) nil))
    nil)
   nil shostak))
 (alpha_preserves_fresh 0
  (alpha_preserves_fresh-2 nil 3745913451
   ("" (measure-induct "size(t)" "t")
    (("" (induct "x")
      (("1" (skeep) (("1" (hide -1) (("1" (grind) nil nil)) nil)) nil)
       ("2" (skolem 1 ("pm" "V"))
        (("2" (flatten)
          (("2" (skeep)
            (("2" (hide -1)
              (("2" (case "susp?(s)")
                (("1" (lemma "term_times_eta")
                  (("1" (inst? -1)
                    (("1" (replace -1 -3 rl)
                      (("1" (replace -1 1 rl)
                        (("1" (hide -1 -2)
                          (("1" (grind)
                            (("1" (reveal -1)
                              (("1"
                                (name-replace
                                 "b"
                                 "act(reverse(p(s)))(a)")
                                (("1"
                                  (inst -1 "b")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (lemma "act_reverse_pi")
                                    (("2"
                                      (expand "b" -2)
                                      (("2"
                                        (case "act(pm)(b) = a")
                                        (("1"
                                          (inst -2 "b" "a" "pm")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide -1 -3 -4 2)
                                          (("2"
                                            (lemma "act_reverse2")
                                            (("2"
                                              (grind)
                                              (("2"
                                                (expand "b" 1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (name-replace "b" "act(reverse(pm))(a)")
                              (("2"
                                (expand "b" -1 1)
                                (("2"
                                  (lemma "act_reverse2")
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (replace -1 -2)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (lemma "act_reverse_pi")
                                          (("2"
                                            (inst -1 "b" "a" "p(s)")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (lemma "act_reverse2")
                              (("3"
                                (inst? -1)
                                (("3"
                                  (replace -1 -2)
                                  (("3"
                                    (name-replace
                                     "b"
                                     "act(reverse[[atom, atom]](pm))(a)")
                                    (("3"
                                      (lemma "act_reverse_pi")
                                      (("3"
                                        (inst -1 "b" "a" "p(s)")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "alpha_ord") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (flatten) (("3" (hide -1) (("3" (grind) nil nil)) nil))
        nil)
       ("4" (skolem 1 ("p1" "p2"))
        (("4" (flatten)
          (("4" (hide -1 -2)
            (("4" (hide -1)
              (("4" (skeep)
                (("4" (case "pair?(s)")
                  (("1" (lemma "term_pair_eta")
                    (("1" (inst? -1)
                      (("1" (replace -1 -3 rl)
                        (("1" (replace -1 1 rl)
                          (("1" (hide -1 -2)
                            (("1" (expand "alpha")
                              (("1"
                                (expand "fresh")
                                (("1"
                                  (reveal -4)
                                  (("1"
                                    (inst-cp -1 "p1")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst
                                         -1
                                         "Delta"
                                         "a"
                                         "term1(s)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -2 "p2")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (inst
                                                 -1
                                                 "Delta"
                                                 "a"
                                                 "term2(s)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -2 -3)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 -2 -3 2)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (lemma "alpha_ord") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (hide -1)
          (("5" (skeep)
            (("5" (case "abs?(s)")
              (("1" (lemma "term_abs_eta")
                (("1" (inst -1 "s")
                  (("1" (replace -1 -4 rl)
                    (("1" (replace -1 1 rl)
                      (("1" (hide -1 -2)
                        (("1" (expand "fresh" 1)
                          (("1" (expand "alpha" -2)
                            (("1" (prop)
                              (("1"
                                (assert)
                                (("1"
                                  (inst -3 "abs2_var")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst -1 "Delta" "a" "body(s)")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -3 "abs2_var")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst
                                     -1
                                     "Delta"
                                     "a"
                                     "ext((: (abs1_var, abstr(s)) :))(body(s))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "ext_reverse_fresh")
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (replace -1 -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 2)
                (("2" (lemma "alpha_ord") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skolem 1 ("f" "ag"))
        (("6" (flatten)
          (("6" (hide -1)
            (("6" (skeep)
              (("6" (case "app?(s)")
                (("1" (lemma "term_app_eta")
                  (("1" (inst -1 "s")
                    (("1" (replace -1 -4 rl)
                      (("1" (replace -1 1 rl)
                        (("1" (hide -1 -2)
                          (("1" (expand "alpha" -2)
                            (("1" (expand "fresh" 1)
                              (("1"
                                (inst -1 "ag")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst -1 "Delta" "a" "arg(s)")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide -1 -2 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 2)
                  (("2" (lemma "alpha_ord") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skolem 1 ("f" "ag"))
        (("7" (flatten)
          (("7" (hide -1)
            (("7" (skeep)
              (("7" (case "c_app?(s)")
                (("1" (lemma "term_c_app_eta")
                  (("1" (inst -1 "s")
                    (("1" (replace -1 -4 rl)
                      (("1" (replace -1 1 rl)
                        (("1" (expand "fresh" 1)
                          (("1"
                            (case "ag = pair(term1(ag), term2(ag))")
                            (("1"
                              (case "c_arg(s) = pair(term1(c_arg(s)), term2(c_arg(s)))")
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (replace -2 1)
                                  (("1"
                                    (expand "fresh" 1)
                                    (("1"
                                      (expand "alpha" -6)
                                      (("1"
                                        (hide -1 -2 -3 -4)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst-cp -3 "term1(ag)")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (inst
                                                 -1
                                                 "Delta"
                                                 "a"
                                                 "term1(c_arg(s))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -2 -5)
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "term2(ag)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "Delta"
                                                           "a"
                                                           "term2(c_arg(s))")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (hide -3)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst-cp -3 "term1(ag)")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (inst
                                                 -1
                                                 "Delta"
                                                 "a"
                                                 "term2(c_arg(s))")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (hide -2 -5)
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "term2(ag)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "Delta"
                                                           "a"
                                                           "term1(c_arg(s))")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (hide -3)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (typepred "c_arg(s)")
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (lemma "term_pair_eta")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (typepred "ag")
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (lemma "term_pair_eta")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 2)
                  (("2" (lemma "alpha_ord") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term_induction formula-decl nil term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (alpha_ord formula-decl nil alpha_equivalence nil)
    (term_times_eta formula-decl nil term_adt nil)
    (b skolem-const-decl "atom" alpha_equivalence nil)
    (b skolem-const-decl "atom" alpha_equivalence nil)
    (act_reverse2 formula-decl nil atoms nil)
    (act_reverse_pi formula-decl nil atoms nil)
    (reverse def-decl "list[T]" list_props nil)
    (act def-decl "atom" atoms nil)
    (p adt-accessor-decl "[(susp?) -> perm]" term_adt nil)
    (set type-eq-decl nil sets nil)
    (pm skolem-const-decl "perm" alpha_equivalence nil)
    (a skolem-const-decl "atom" alpha_equivalence nil)
    (ds const-decl "set[atom]" atoms nil)
    (s skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (susp? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (s skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pair type-eq-decl nil term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (s skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (append def-decl "list[T]" list_props nil)
    (ext_reverse_fresh formula-decl nil freshness nil)
    (ext def-decl "term" nominal_term nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (term_abs_eta formula-decl nil term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (s skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_c_app_eta formula-decl nil term_adt nil)
    (c_arg adt-accessor-decl "[(c_app?) -> pair]" term_adt nil)
    (pair adt-constructor-decl "[[term, term] -> (pair?)]" term_adt
     nil)
    (s skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (c_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (fresh def-decl "bool" freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (alpha def-decl "bool" alpha_equivalence nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_term nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_term nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (alpha_preserves_fresh-1 nil 3624624893
   ("" (induct t)
    (("1" (grind) nil nil)
     ("2" (grind)
      (("1" (reveal -1)
        (("1" (inst -1 "act(reverse(p(s!1)))(a!1)")
          (("1" (rewrite act_reverse2)
            (("1" (replace -1 -10 rl)
              (("1" (rewrite act_reverse) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (rewrite act_reverse2)
        (("2" (replace -1 1) (("2" (rewrite act_reverse) nil nil))
          nil))
        nil)
       ("3" (rewrite act_reverse2)
        (("3" (replace -1 -10) (("3" (rewrite act_reverse) nil nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil)
     ("4" (skeep*)
      (("4" (expand alpha -3)
        (("4" (flatten)
          (("4" (inst -1 delta a "term1(s)")
            (("4" (inst -2 delta a "term2(s)") (("4" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep*)
      (("5" (expand alpha -2)
        (("5" (prop)
          (("1" (inst -3 delta a "body(s)")
            (("1" (expand fresh 1)
              (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
            nil)
           ("2" (expand fresh 2)
            (("2" (assert)
              (("2" (iff)
                (("2" (prop)
                  (("1" (assert) nil nil)
                   ("2"
                    (inst -4 delta a
                     "ext((: (abs1_var, abstr(s)) :))(body(s))")
                    (("2"
                      (lemma ext_preserves_fresh
                       (delta delta pi "(:((abs1_var, abstr(s))):)" a a
                        t "body(s)"))
                      (("2" (expand* act act) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3"
                    (inst -4 delta a
                     "ext((: (abs1_var, abstr(s)) :))(body(s))")
                    (("3"
                      (lemma ext_preserves_fresh
                       (delta delta pi "(:((abs1_var, abstr(s))):)" a
                        abs1_var t "body(s)"))
                      (("3" (expand* act act) (("3" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("4"
                    (inst -4 delta a
                     "ext((: (abs1_var, abstr(s)) :))(body(s))")
                    (("4"
                      (lemma ext_preserves_fresh
                       (delta delta pi "(:((abs1_var, abstr(s))):)" a a
                        t "body(s)"))
                      (("4" (expand* act act) (("4" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep*)
      (("6" (expand alpha -2)
        (("6" (flatten)
          (("6" (inst -1 delta a "arg(s)") (("6" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (ext_preserves_alpha 0
  (ext_preserves_alpha-2 nil 3745913796
   ("" (measure-induct "size(t)" "t")
    (("" (induct "x")
      (("1" (skeep)
        (("1" (hide -1)
          (("1" (skeep)
            (("1" (case "atom?(s)")
              (("1" (lemma "term_at_eta")
                (("1" (inst? -1)
                  (("1" (replace -1 1 rl)
                    (("1" (expand "ext" 1)
                      (("1" (grind)
                        (("1" (decompose-equality)
                          (("1" (decompose-equality)
                            (("1" (decompose-equality)
                              (("1"
                                (lemma "act_invariance")
                                (("1"
                                  (inst? -1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "ext" 2 1)
                (("2" (lemma "ext_preserves_type")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 ("pm" "V"))
        (("2" (flatten)
          (("2" (hide -1)
            (("2" (skeep)
              (("2" (case "susp?(s)")
                (("1" (lemma "term_times_eta")
                  (("1" (inst -1 "s")
                    (("1" (replace -1 1 rl)
                      (("1" (hide -1)
                        (("1" (expand "ext" 1)
                          (("1" (hide -1)
                            (("1" (expand "alpha")
                              (("1"
                                (grind)
                                (("1"
                                  (reveal -1)
                                  (("1"
                                    (inst -1 "a!1")
                                    (("1"
                                      (rewrite "act_append")
                                      (("1"
                                        (rewrite "act_append")
                                        (("1"
                                          (hide -2 -3 2)
                                          (("1"
                                            (grind)
                                            (("1"
                                              (lemma "act_invariance")
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "act_append")
                                  (("2"
                                    (rewrite "act_append")
                                    (("2"
                                      (reveal -1)
                                      (("2"
                                        (hide -2)
                                        (("2"
                                          (inst -1 "a!1")
                                          (("2"
                                            (lemma "act_invariance")
                                            (("2"
                                              (rewrite "act_append")
                                              (("2"
                                                (rewrite "act_append")
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (reveal -1)
                                  (("3"
                                    (inst -1 "a!1")
                                    (("3"
                                      (hide -2 -3 2)
                                      (("3"
                                        (rewrite "act_append")
                                        (("3"
                                          (rewrite "act_append")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (hide -1 -2)
                                  (("4"
                                    (reveal -3)
                                    (("4"
                                      (inst -1 "a!1")
                                      (("4"
                                        (rewrite "act_append")
                                        (("4"
                                          (rewrite "act_append")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "ext" 2 1)
                  (("2" (grind)
                    (("1" (hide -2 -3 2)
                      (("1" (lemma "ext_preserves_type")
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (hide -1 -3 2)
                      (("2" (lemma "ext_preserves_type")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (flatten)
        (("3" (hide -1)
          (("3" (skeep)
            (("3" (grind)
              (("3" (lemma "ext_preserves_type")
                (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skolem 1 ("p1" "p2"))
        (("4" (flatten)
          (("4" (hide -1 -2)
            (("4" (hide -1)
              (("4" (skeep)
                (("4" (case "pair?(s)")
                  (("1" (lemma "term_pair_eta")
                    (("1" (inst -1 "s")
                      (("1" (replace -1 1 rl)
                        (("1" (expand "ext" 1)
                          (("1" (hide -1 -2)
                            (("1" (expand "alpha")
                              (("1"
                                (case
                                 "alpha(Delta)(ext(pi)(p1), ext(pi)(term1(s))) = alpha(Delta)(p1, term1(s))")
                                (("1"
                                  (case
                                   "alpha(Delta)(ext(pi)(p2), ext(pi)(term2(s))) = alpha(Delta)(p2, term2(s))")
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (reveal -4)
                                    (("2"
                                      (hide -2 2)
                                      (("2"
                                        (inst -1 "p2")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst
                                             -1
                                             "Delta"
                                             "pi"
                                             "term2(s)")
                                            nil
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (reveal -4)
                                    (("2"
                                      (inst -1 "p1")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (inst
                                           -1
                                           "Delta"
                                           "pi"
                                           "term1(s)")
                                          nil
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (reveal -2)
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "ext_preserves_type")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (hide -1)
          (("5" (skeep)
            (("5" (hide -1)
              (("5" (expand "ext" 1 1)
                (("5" (case "abs?(s)")
                  (("1" (lemma "term_abs_eta")
                    (("1" (inst -1 "s")
                      (("1" (replace -1 1 rl)
                        (("1" (expand "ext" 1 2)
                          (("1" (expand "alpha" 1)
                            (("1" (assert)
                              (("1"
                                (hide -1 -2)
                                (("1"
                                  (grind)
                                  (("1"
                                    (reveal -4)
                                    (("1"
                                      (inst -1 "abs2_var")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (inst
                                           -1
                                           "Delta"
                                           "pi"
                                           "body(s)")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -2 2)
                                    (("2"
                                      (lemma "act_invariance")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide -2 2)
                                    (("3"
                                      (lemma "act_invariance")
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (reveal -4)
                                    (("4"
                                      (inst -1 "abs2_var")
                                      (("4"
                                        (prop)
                                        (("1"
                                          (inst
                                           -1
                                           "Delta"
                                           "pi"
                                           "body(s)")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("5"
                                    (hide -2 -3 1)
                                    (("5"
                                      (lemma "act_invariance")
                                      (("5" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("6"
                                    (hide -1 1 2)
                                    (("6"
                                      (rewrite "ext_append" :dir rl)
                                      (("6"
                                        (lemma
                                         "alpha_ext_invariance_right")
                                        (("6"
                                          (inst
                                           -1
                                           "Delta"
                                           "cons((act(pi)(abs1_var), act(pi)(abstr(s))), pi)"
                                           "append(pi, (: (abs1_var, abstr(s)) :))"
                                           "body(s)"
                                           "ext(pi)(abs2_var)")
                                          (("6"
                                            (prop)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -2 -1)
                                                (("1"
                                                  (rewrite
                                                   "ext_append")
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (reveal -7)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "abs2_var")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "Delta"
                                                             "pi"
                                                             "ext((: (abs1_var, abstr(s)) :))(body(s))")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 2)
                                              (("2"
                                                (lemma "act_comm")
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (grind)
                                                    (("2"
                                                      (case
                                                       "cons((act(pi)(abs1_var), act(pi)(abstr(s))), pi) = append((:(act(pi)(abs1_var), act(pi)(abstr(s))):), pi)")
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (lemma
                                                             "act_comm")
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "append")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("7"
                                    (lemma "ext_preserves_fresh")
                                    (("7"
                                      (inst
                                       -1
                                       "Delta"
                                       "abs1_var"
                                       "pi"
                                       "body(s)")
                                      (("7" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("8"
                                    (rewrite "ext_append" :dir rl)
                                    (("8"
                                      (lemma
                                       "alpha_ext_invariance_right")
                                      (("8"
                                        (inst
                                         -1
                                         "Delta"
                                         "append(pi, (:(abs1_var, abstr(s)):))"
                                         "cons((act(pi)(abs1_var), act(pi)(abstr(s))), pi)"
                                         "body(s)"
                                         "ext(pi)(abs2_var)")
                                        (("8"
                                          (prop)
                                          (("1"
                                            (replace -1 2 rl)
                                            (("1"
                                              (rewrite "ext_append")
                                              (("1"
                                                (hide -1 -2 1 3)
                                                (("1"
                                                  (reveal -7)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "abs2_var")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "Delta"
                                                         "pi"
                                                         "ext((: (abs1_var, abstr(s)) :))(body(s))")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1 2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (lemma "act_comm")
                                              (("2"
                                                (decompose-equality)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("9"
                                    (hide -2 3)
                                    (("9"
                                      (hide 1)
                                      (("9"
                                        (lemma "ext_preserves_fresh")
                                        (("9"
                                          (inst
                                           -1
                                           "Delta"
                                           "abs1_var"
                                           "pi"
                                           "body(s)")
                                          (("9" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "ext_preserves_type")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skolem 1 ("f" "ag"))
        (("6" (flatten)
          (("6" (hide -1 -2)
            (("6" (skeep)
              (("6" (case "app?(s)")
                (("1" (lemma "term_app_eta")
                  (("1" (inst? -1)
                    (("1" (replace -1 1 rl)
                      (("1" (expand "ext" 1)
                        (("1" (hide -1 -2)
                          (("1" (grind)
                            (("1" (reveal -5)
                              (("1"
                                (inst -1 "ag")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst -1 "Delta" "pi" "arg(s)")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide -1 -2 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (reveal -5)
                              (("2"
                                (inst -1 "ag")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst -1 "Delta" "pi" "arg(s)")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide -1 -2 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "ext_preserves_type")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skolem 1 ("f" "ag"))
        (("7" (flatten)
          (("7" (hide -1)
            (("7" (skeep)
              (("7" (case "c_app?(s)")
                (("1" (lemma "term_c_app_eta")
                  (("1" (inst -1 "s")
                    (("1" (replace -1 1 rl)
                      (("1" (expand "ext" 1)
                        (("1" (case "ag = pair(term1(ag), term2(ag))")
                          (("1" (replace -1 1)
                            (("1" (assert)
                              (("1"
                                (case
                                 "c_arg(s) = pair(term1(c_arg(s)), term2(c_arg(s)))")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -2 -3 -4 -5)
                                      (("1"
                                        (expand "alpha" 1)
                                        (("1"
                                          (case
                                           "alpha(Delta)(ext(pi)(term1(ag)), ext(pi)(term1(c_arg(s)))) = alpha(Delta)(term1(ag), term1(c_arg(s)))")
                                          (("1"
                                            (case
                                             "alpha(Delta)(ext(pi)(term2(ag)), ext(pi)(term2(c_arg(s)))) = alpha(Delta)(term2(ag), term2(c_arg(s)))")
                                            (("1"
                                              (case
                                               "alpha(Delta)(ext(pi)(term1(ag)), ext(pi)(term2(c_arg(s)))) = alpha(Delta)(term1(ag), term2(c_arg(s)))")
                                              (("1"
                                                (case
                                                 "alpha(Delta)(ext(pi)(term2(ag)), ext(pi)(term1(c_arg(s)))) = alpha(Delta)(term2(ag), term1(c_arg(s)))")
                                                (("1"
                                                  (hide -5)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (reveal -8)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "term2(ag)")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "Delta"
                                                           "pi"
                                                           "term1(c_arg(s))")
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (reveal -7)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "term1(ag)")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "Delta"
                                                         "pi"
                                                         "term2(c_arg(s))")
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (reveal -6)
                                                (("2"
                                                  (inst -1 "term2(ag)")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "Delta"
                                                       "pi"
                                                       "term2(c_arg(s))")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (reveal -5)
                                              (("2"
                                                (inst -1 "term1(ag)")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "Delta"
                                                     "pi"
                                                     "term1(c_arg(s))")
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (typepred "c_arg(s)")
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (lemma "term_pair_eta")
                                        (("2"
                                          (inst? -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (typepred "ag")
                              (("2"
                                (hide -1)
                                (("2"
                                  (lemma "term_pair_eta")
                                  (("2"
                                    (inst? -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1)
                  (("2" (expand "ext" 2 1)
                    (("2" (lemma "ext_preserves_type")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (term_induction formula-decl nil term_adt nil)
    (atom? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (s skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (at adt-constructor-decl "[atom -> (atom?)]" term_adt nil)
    (a adt-accessor-decl "[(atom?) -> atom]" term_adt nil)
    (term_at_extensionality formula-decl nil term_adt nil)
    (act_invariance formula-decl nil atoms nil)
    (act def-decl "atom" atoms nil)
    (term_at_eta formula-decl nil term_adt nil)
    (ext_preserves_type formula-decl nil nominal_term nil)
    (ord const-decl "upto(6)" term_adt nil)
    (term_times_eta formula-decl nil term_adt nil)
    (a!1 skolem-const-decl "(ds(append(pi, pm), append(pi, p(s))))"
     alpha_equivalence nil)
    (a!1 skolem-const-decl "(ds(append(pi, pm), append(pi, p(s))))"
     alpha_equivalence nil)
    (V adt-accessor-decl "[(susp?) -> variable]" term_adt nil)
    (a!1 skolem-const-decl "(ds(pm, p(s)))" alpha_equivalence nil)
    (act_append formula-decl nil atoms nil)
    (a!1 skolem-const-decl "(ds(pm, p(s)))" alpha_equivalence nil)
    (pi skolem-const-decl "perm" alpha_equivalence nil)
    (append def-decl "list[T]" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pm skolem-const-decl "perm" alpha_equivalence nil)
    (V skolem-const-decl "variable" alpha_equivalence nil)
    (p adt-accessor-decl "[(susp?) -> perm]" term_adt nil)
    (set type-eq-decl nil sets nil)
    (ds const-decl "set[atom]" atoms nil)
    (/= const-decl "boolean" notequal nil)
    (s skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (susp? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (s skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (s skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ext_append formula-decl nil nominal_term nil)
    (act_comm formula-decl nil atoms nil)
    (alpha_ext_invariance_right formula-decl nil alpha_equivalence nil)
    (ext_preserves_fresh formula-decl nil freshness nil)
    (term_abs_eta formula-decl nil term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (s skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_c_app_eta formula-decl nil term_adt nil)
    (pair adt-constructor-decl "[[term, term] -> (pair?)]" term_adt
     nil)
    (c_arg adt-accessor-decl "[(c_app?) -> pair]" term_adt nil)
    (s skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (c_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ext def-decl "term" nominal_term nil)
    (alpha def-decl "bool" alpha_equivalence nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_term nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_term nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (ext_preserves_alpha-1 nil 3624370280
   ("" (skolem 1 (delta "_" "_" "_"))
    (("" (lemma ext_preserves_type)
      (("" (induct t)
        (("1" (grind)
          (("1" (decompose-equality 1)
            (("1" (decompose-equality -7)
              (("1"
                (lemma act_invariance
                 (pi pi!1 a "a(s!1)" b "at1_var!1"))
                (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (grind)
          (("1" (reveal -2)
            (("1" (inst -1 a!1)
              (("1" (assert) nil nil)
               ("2" (rewrite act_append)
                (("2" (rewrite act_append)
                  (("2"
                    (lemma act_invariance
                     (pi pi!1 a "act(times1_var!1)(a!1)" b
                      "act(p(s!1))(a!1)"))
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (reveal -2)
            (("2" (inst -1 a!1)
              (("1" (assert) nil nil)
               ("2" (rewrite act_append)
                (("2" (rewrite act_append)
                  (("2"
                    (lemma act_invariance
                     (pi pi!1 a "act(times1_var!1)(a!1)" b
                      "act(p(s!1))(a!1)"))
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (rewrite act_append)
            (("3" (rewrite act_append)
              (("3" (reveal -2)
                (("3" (inst -1 a!1)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("4" (rewrite act_append)
            (("4" (rewrite act_append)
              (("4" (reveal -2)
                (("4" (inst -1 a!1)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (grind) nil nil)
         ("4" (skeep*)
          (("4" (inst -3 pi s)
            (("4" (inst -1 pi "term1(s)")
              (("1" (inst -2 pi "term2(s)") (("1" (grind) nil nil))
                nil)
               ("2" (hide -1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("5" (skeep)
          (("5" (induct s)
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (skeep*)
              (("5" (hide -1 -3)
                (("5" (expand ext 1)
                  (("5" (expand alpha 1)
                    (("5"
                      (lemma act_invariance
                       (pi pi a "abs1_var" b "abs1_var_1"))
                      (("5" (inst-cp -2 pi abs2_var_1)
                        (("5"
                          (inst -2 pi
                           "ext((: (abs1_var, abs1_var_1) :))(abs2_var_1)")
                          (("5" (lift-if)
                            (("5" (lift-if)
                              (("5"
                                (lift-if)
                                (("5"
                                  (assert)
                                  (("5"
                                    (lemma
                                     ext_preserves_fresh
                                     (delta
                                      delta
                                      pi
                                      pi
                                      a
                                      "abs1_var"
                                      t
                                      "abs2_var_1"))
                                    (("5"
                                      (prop)
                                      (("1"
                                        (iff)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (iff 2)
                                        (("2"
                                          (replace -1 2)
                                          (("2"
                                            (lemma
                                             ext_append
                                             (pi1
                                              "pi"
                                              pi2
                                              "(: (abs1_var, abs1_var_1) :)"
                                              t
                                              "abs2_var_1"))
                                            (("2"
                                              (lemma
                                               alpha_ext_invariance_right
                                               (delta
                                                delta
                                                pi1
                                                "append(pi, (: (abs1_var, abs1_var_1) :))"
                                                pi2
                                                "append((: (act(pi)(abs1_var), act(pi)(abs1_var_1)) :), pi)"
                                                t
                                                "ext(pi)(abs2_var)"
                                                s
                                                "abs2_var_1"))
                                              (("2"
                                                (rewrite ext_append -1)
                                                (("2"
                                                  (rewrite
                                                   ext_append
                                                   -1)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (lemma
                                                         act_comm
                                                         (pi
                                                          pi
                                                          a
                                                          "abs1_var"
                                                          b
                                                          "abs1_var_1"))
                                                        (("2"
                                                          (decompose-equality
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("6" (grind) nil nil))
            nil))
          nil)
         ("6" (skeep*)
          (("6" (inst -2 pi s)
            (("6" (expand ext 1 1)
              (("6" (expand alpha 1)
                (("6" (inst -1 pi "arg(s)")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (ext_reverse_alpha 0
  (ext_reverse_alpha-2 nil 3745913970
   ("" (skeep)
    ((""
      (lemma "ext_preserves_alpha"
       ("Delta" "Delta" "pi" "reverse(pi)" "t" "ext(pi)(t)" "s" "s"))
      (("" (replace -1 1 rl)
        ((""
          (lemma "ext_append" ("pi1" "reverse(pi)" "pi2" "pi" "t" "t"))
          (("" (lemma "alpha_ext_invariance_left")
            ((""
              (inst -1 "Delta" "append(reverse(pi), pi)" "(::)"
               "ext(reverse(pi))(s)" "t")
              (("" (rewrite "ext_identity")
                (("" (assert)
                  (("" (hide-all-but 1)
                    (("" (decompose-equality)
                      (("" (rewrite "act_append")
                        (("" (rewrite "act_reverse")
                          (("" (expand "act") (("" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ext def-decl "term" nominal_term nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (reverse def-decl "list[T]" list_props nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil nominal_term nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ext_preserves_alpha formula-decl nil alpha_equivalence nil)
    (ext_append formula-decl nil nominal_term nil)
    (append def-decl "list[T]" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (act def-decl "atom" atoms nil)
    (act_reverse formula-decl nil atoms nil)
    (act_append formula-decl nil atoms nil)
    (ext_identity formula-decl nil nominal_term nil)
    (alpha_ext_invariance_left formula-decl nil alpha_equivalence nil))
   nil)
  (ext_reverse_alpha-1 nil 3625403098
   ("" (skeep)
    ((""
      (lemma ext_preserves_alpha
       (delta delta pi "reverse(pi)" t "ext(pi)(t)" s s))
      (("" (replace -1 1 rl)
        (("" (lemma ext_append (pi1 "reverse(pi)" pi2 pi t t))
          (("" (lemma alpha_ext_invariance_left)
            ((""
              (inst -1 delta "append(reverse(pi), pi)" "(::)"
               "ext(reverse(pi))(s)" t)
              (("" (rewrite ext_identity)
                (("" (assert)
                  (("" (hide-all-but 1)
                    (("" (decompose-equality)
                      (("" (rewrite act_append)
                        (("" (rewrite act_reverse)
                          (("" (expand act) (("" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (alpha_fresh_invariance 0
  (alpha_fresh_invariance-2 nil 3745914672
   ("" (skolem 1 ("Delta" "pi1" "_" "_"))
    (("" (induct "t")
      (("1" (grind) nil nil)
       ("2" (grind)
        (("1" (reveal -1)
          (("1" (rewrite "act_append")
            (("1" (rewrite "act_append")
              (("1" (inst -1 "act(times1_var!1)(a!1)")
                (("1" (rewrite "act_reverse") nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (reveal -1)
          (("2" (rewrite "act_append")
            (("2" (rewrite "act_append")
              (("2" (inst -1 "act(times1_var!1)(a!1)")
                (("2" (rewrite "act_reverse") nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil)
       ("4" (grind)
        (("1" (hide -1 -2)
          (("1" (reveal -3)
            (("1" (inst -1 "a!1") (("1" (flatten) nil nil)) nil)) nil))
          nil)
         ("2" (hide -1 -2 -3)
          (("2" (reveal -4)
            (("2" (inst -1 "a!1") (("2" (flatten) nil nil)) nil)) nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "ext" 1)
            (("5" (expand "alpha" 1)
              (("5" (prop)
                (("1" (inst -2 "pi2")
                  (("1" (prop)
                    (("1" (expand "fresh" -2)
                      (("1" (assert)
                        (("1" (hide 2) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1)
                  (("2" (lemma "ext_reverse_fresh")
                    (("2"
                      (inst -1 "Delta" "act(pi1)(abs1_var)" "pi2"
                       "abs2_var")
                      (("2" (assert)
                        (("2" (replace -1 1)
                          (("2" (hide -1)
                            (("2"
                              (inst -1
                               "act(reverse(pi2))(act(pi1)(abs1_var))")
                              (("1"
                                (expand "fresh" -1)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide 1)
                                    (("1"
                                      (lemma "act_reverse_pi")
                                      (("1"
                                        (inst
                                         -1
                                         "act(pi1)(abs1_var)"
                                         "abs1_var"
                                         "reverse(pi2)")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (rewrite
                                                 "reverse_reverse")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand "ds" 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (grind)
                                      (("2"
                                        (lemma "act_reverse2")
                                        (("2"
                                          (inst
                                           -1
                                           "act(pi1)(abs1_var)"
                                           "pi2")
                                          (("2"
                                            (replace -1 -2)
                                            (("2"
                                              (lemma "act_invariance")
                                              (("2"
                                                (inst
                                                 -1
                                                 "act(reverse[[atom, atom]](pi2))(act(pi1)(abs1_var))"
                                                 "abs1_var"
                                                 "pi1")
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (hide -2 -3)
                                                    (("2"
                                                      (lemma
                                                       "act_reverse_pi")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "act(pi1)(abs1_var)"
                                                         "abs1_var"
                                                         "reverse(pi2)")
                                                        (("2"
                                                          (prop)
                                                          (("2"
                                                            (rewrite
                                                             "reverse_reverse")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3"
                  (inst -1
                   "append((: (act(pi1)(abs1_var), act(pi2)(abs1_var)) :), pi2)")
                  (("3" (rewrite "ext_append")
                    (("3" (assert)
                      (("3" (skeep)
                        (("3" (typepred "a")
                          (("3" (expand "ds")
                            (("3" (rewrite "act_append")
                              (("3"
                                (inst -2 "a")
                                (("1"
                                  (expand "fresh" -2)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "act" 1 2)
                                      (("1"
                                        (expand "act" 1 (2 6 10))
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "ds")
                                  (("2"
                                    (prop)
                                    (("2"
                                      (expand "act" 1 2)
                                      (("2"
                                        (expand "act" 1 (2 6 10))
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (lemma
                                                 "act_invariance"
                                                 ("pi"
                                                  "pi1"
                                                  "a"
                                                  "a"
                                                  "b"
                                                  "abs1_var"))
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "act_invariance"
                                                 ("pi"
                                                  "pi2"
                                                  "a"
                                                  "a"
                                                  "b"
                                                  "abs1_var"))
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (grind) nil nil)
       ("7" (skolem 1 ("f" "ag"))
        (("7" (prop)
          (("7" (skeep)
            (("7" (expand "ext" 1)
              (("7" (expand "alpha" 1)
                (("7" (flatten)
                  (("7" (inst -1 "pi2")
                    (("7" (split -1)
                      (("1" (hide -2)
                        (("1" (expand "ext" -1)
                          (("1" (assert)
                            (("1" (expand "alpha" -1)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2 3)
                        (("2" (expand "fresh" -1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (ds const-decl "set[atom]" atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (fresh def-decl "bool" freshness nil)
    (alpha def-decl "bool" alpha_equivalence nil)
    (ext def-decl "term" nominal_term nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_term nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (term_induction formula-decl nil term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (act_reverse formula-decl nil atoms nil)
    (act_append formula-decl nil atoms nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (act def-decl "atom" atoms nil)
    (pi1 skolem-const-decl "perm" alpha_equivalence nil)
    (times1_var!1 skolem-const-decl "perm" alpha_equivalence nil)
    (pi2!1 skolem-const-decl "perm" alpha_equivalence nil)
    (a!1 skolem-const-decl
     "(ds(append(pi1, times1_var!1), append(pi2!1, times1_var!1)))"
     alpha_equivalence nil)
    (append def-decl "list[T]" list_props nil)
    (pi2!1 skolem-const-decl "perm" alpha_equivalence nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (a skolem-const-decl
     "(ds(pi1, append((: (act(pi1)(abs1_var), act(pi2)(abs1_var)) :), pi2)))"
     alpha_equivalence nil)
    (ext_append formula-decl nil nominal_term nil)
    (pi2 skolem-const-decl "perm" alpha_equivalence nil)
    (reverse def-decl "list[T]" list_props nil)
    (abs1_var skolem-const-decl "atom" alpha_equivalence nil)
    (act_reverse_pi formula-decl nil atoms nil)
    (reverse_reverse formula-decl nil list_props nil)
    (act_invariance formula-decl nil atoms nil)
    (act_reverse2 formula-decl nil atoms nil)
    (ext_reverse_fresh formula-decl nil freshness nil))
   nil)
  (alpha_fresh_invariance-1 nil 3624864938
   ("" (skolem 1 (delta pi1 "_" "_"))
    (("" (induct t)
      (("1" (grind) nil nil)
       ("2" (grind)
        (("1" (reveal -1)
          (("1" (rewrite act_append)
            (("1" (rewrite act_append)
              (("1" (inst -1 "act(times1_var!1)(a!1)")
                (("1" (rewrite act_reverse) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (reveal -1)
          (("2" (rewrite act_append)
            (("2" (rewrite act_append)
              (("2" (inst -1 "act(times1_var!1)(a!1)")
                (("2" (rewrite act_reverse) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil)
       ("4" (grind)
        (("1" (hide -1 -2)
          (("1" (reveal -3)
            (("1" (inst -1 a!1) (("1" (flatten) nil nil)) nil)) nil))
          nil)
         ("2" (hide -1 -2 -3)
          (("2" (reveal -4)
            (("2" (inst -1 a!1) (("2" (flatten) nil nil)) nil)) nil))
          nil))
        nil)
       ("5" (skeep*)
        (("5" (expand ext 1)
          (("5" (expand alpha 1)
            (("5" (prop)
              (("1" (inst -2 pi2)
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (inst -2 a)
                      (("1" (expand fresh -2)
                        (("1" (prop)
                          (("1" (typepred a)
                            (("1" (expand ds) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -2 "act(reverse(pi2))(act(pi1)(abs1_var))")
                (("1"
                  (lemma ext_preserves_fresh
                   (delta delta pi pi2 a
                    "act(reverse(pi2))(act(pi1)(abs1_var))" t
                    "abs(abs1_var, abs2_var)"))
                  (("1" (replace -1 -3 rl)
                    (("1" (rewrite act_reverse2)
                      (("1" (expand ext -3)
                        (("1" (expand fresh -3)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand ds)
                  (("2" (rewrite act_reverse2)
                    (("2"
                      (lemma act_invariance
                       (pi pi1 a
                        "act(reverse[[atom, atom]](pi2))(act(pi1)(abs1_var))"
                        b "abs1_var"))
                      (("2" (assert)
                        (("2" (replace -1 3 rl)
                          (("2" (rewrite act_reverse2 3)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3"
                (inst -1
                 "append((: (act(pi1)(abs1_var), act(pi2)(abs1_var)) :),pi2)")
                (("3" (rewrite ext_append)
                  (("3" (assert)
                    (("3" (skeep)
                      (("3" (typepred a)
                        (("3" (expand ds)
                          (("3" (rewrite act_append)
                            (("3" (inst -2 a)
                              (("1"
                                (expand fresh -2)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand act 1 2)
                                    (("1"
                                      (expand act 1 (2 6 10))
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand ds)
                                (("2"
                                  (prop)
                                  (("2"
                                    (expand act 1 2)
                                    (("2"
                                      (expand act 1 (2 6 10))
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (lemma
                                               act_invariance
                                               (pi pi1 a a b abs1_var))
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               act_invariance
                                               (pi pi2 a a b abs1_var))
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (grind) nil nil))
      nil))
    nil)
   nil shostak))
 (alpha_transitive 0
  (alpha_transitive-2 nil 3745915197
   ("" (measure-induct "size(t1)" "t1")
    (("" (induct "x")
      (("1" (skeep) (("1" (hide -1) (("1" (grind) nil nil)) nil)) nil)
       ("2" (skolem 1 ("pm" "V"))
        (("2" (flatten)
          (("2" (hide -1)
            (("2" (skeep)
              (("2" (expand "alpha" -1)
                (("2" (prop)
                  (("2" (lemma "term_times_eta")
                    (("2" (inst -1 "t2")
                      (("2" (replace -1 -5 rl)
                        (("2" (hide -2)
                          (("2" (expand "alpha" -4)
                            (("2" (prop)
                              (("2"
                                (lemma "term_times_eta")
                                (("2"
                                  (inst -1 "t3")
                                  (("2"
                                    (replace -1 1 rl)
                                    (("2"
                                      (hide -5)
                                      (("2"
                                        (expand "alpha" 1)
                                        (("2"
                                          (prop)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide -1 -2 -5)
                                            (("2"
                                              (replace -1 -3 rl)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst -1 "a")
                                                    (("2"
                                                      (typepred "a")
                                                      (("2"
                                                        (inst -2 "a")
                                                        (("2"
                                                          (expand "ds")
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (flatten) (("3" (hide -1) (("3" (grind) nil nil)) nil))
        nil)
       ("4" (skolem 1 ("p1" "p2"))
        (("4" (flatten)
          (("4" (hide -1 -2)
            (("4" (skeep)
              (("4" (case "t2 = pair(term1(t2), term2(t2))")
                (("1" (replace -1 -3)
                  (("1" (replace -1 -4)
                    (("1" (case "t3 = pair(term1(t3), term2(t3))")
                      (("1" (replace -1 -5)
                        (("1" (replace -1 1)
                          (("1" (expand "alpha" 1)
                            (("1" (prop)
                              (("1"
                                (hide -1 -2)
                                (("1"
                                  (expand "alpha" -2)
                                  (("1"
                                    (expand "alpha" -3)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (hide -3 -5)
                                        (("1"
                                          (inst -1 "p1")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst
                                               -1
                                               "Delta"
                                               "term1(t2)"
                                               "term1(t3)")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "alpha" -4)
                                (("2"
                                  (expand "alpha" -5)
                                  (("2"
                                    (prop)
                                    (("2"
                                      (hide -4 -6)
                                      (("2"
                                        (inst -3 "p2")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst
                                             -1
                                             "Delta"
                                             "term2(t2)"
                                             "term2(t3)")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 -2 -3 2)
                        (("2" (grind)
                          (("2" (lemma "term_pair_eta")
                            (("2" (inst? -1) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -1 -2 -3 2) (("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 -3 2)
                  (("2" (grind)
                    (("2" (lemma "term_pair_eta")
                      (("2" (inst? -1) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -1 -3 2) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (hide -1)
          (("5" (skeep)
            (("5" (case "abs?(t2)")
              (("1" (lemma "term_abs_eta")
                (("1" (inst? -1)
                  (("1" (replace -1 -4 rl)
                    (("1" (case "abs?(t3)")
                      (("1" (lemma "term_abs_eta")
                        (("1" (inst -1 "t3")
                          (("1" (replace -1 -7 rl)
                            (("1" (replace -1 1 rl)
                              (("1"
                                (replace -3 -7 rl)
                                (("1"
                                  (hide -1 -2 -3 -4)
                                  (("1"
                                    (expand "alpha" 1)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "alpha" -3)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand "alpha" -5)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (hide -1 -3 -5)
                                                (("1"
                                                  (inst -3 "abs2_var")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "Delta"
                                                       "body(t2)"
                                                       "body(t3)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "alpha" -5)
                                            (("2"
                                              (prop)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide -1 -3)
                                                (("2"
                                                  (inst -4 "abs2_var")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "Delta"
                                                       "ext((: (abs1_var, abstr(t2)) :))(body(t2))"
                                                       "body(t3)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide
                                                           -2
                                                           -3
                                                           2
                                                           3
                                                           4)
                                                          (("1"
                                                            (lemma
                                                             "ext_reverse_alpha")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "reverse"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "reverse"
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (reveal
                                                                           -4)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1
                                                                             nil
                                                                             t)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "append")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "alpha_ext_invariance_left")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "alpha_ext_invariance_right")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "Delta"
                                                                                             "(: (abstr(t2), abstr(t3)) :)"
                                                                                             "_"
                                                                                             "_"
                                                                                             "_")
                                                                                            (("1"
                                                                                              (inst?
                                                                                               -1)
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   -1
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (decompose-equality
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "alpha" -2)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (expand "alpha" -4)
                                            (("1"
                                              (prop)
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "alpha" -4)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (hide -1 -4 -5 1 3)
                                                (("1"
                                                  (lemma
                                                   "alpha_preserves_fresh")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "Delta"
                                                     "abs1_var"
                                                     "body(t3)"
                                                     "body(t2)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -5)
                                                (("2"
                                                  (lemma
                                                   "alpha_preserves_fresh")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "Delta"
                                                     "abs1_var"
                                                     "ext((: (abstr(t2), abstr(t3)) :))(body(t3))"
                                                     "body(t2)")
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           -4)
                                                          (("2"
                                                            (hide
                                                             -3
                                                             -5)
                                                            (("2"
                                                              (lemma
                                                               "ext_reverse_fresh")
                                                              (("2"
                                                                (inst?
                                                                 -1)
                                                                (("2"
                                                                  (hide
                                                                   -2
                                                                   -3)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "alpha" -2)
                                        (("3"
                                          (prop)
                                          (("1"
                                            (expand "alpha" -4)
                                            (("1"
                                              (prop)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide -1 -3 1 3)
                                                (("2"
                                                  (inst -3 "abs2_var")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "Delta"
                                                       "body(t2)"
                                                       "ext((: (abs1_var, abstr(t3)) :))(body(t3))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (reveal -4)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "alpha" -4)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (hide -1 -3 1 3)
                                                (("1"
                                                  (inst -3 "abs2_var")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "Delta"
                                                       "ext((: (abs1_var, abstr(t2)) :))(body(t2))"
                                                       "ext((: (abs1_var, abstr(t3)) :))(body(t3))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (lemma
                                                             "ext_preserves_alpha")
                                                            (("1"
                                                              (reveal
                                                               -3)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1
                                                                 rl)
                                                                (("1"
                                                                  (inst?
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 -3 1 2 4)
                                                (("2"
                                                  (inst -3 "abs2_var")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "Delta"
                                                       "ext((: (abs1_var, abstr(t2)) :))(body(t2))"
                                                       "ext((: (abs1_var, abstr(t3)) :))(body(t3))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (lemma
                                                               "ext_reverse_alpha")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "Delta"
                                                                 "(: (abs1_var, abstr(t2)) :)"
                                                                 "ext((: (abs1_var, abstr(t3)) :))(body(t3))"
                                                                 "body(t2)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "alpha_fresh_invariance")
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (reveal
                                                                           -6)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "body(t2)")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "Delta"
                                                                                 "ext((: (abstr(t2), abstr(t3)) :))(body(t3))"
                                                                                 "ext(reverse((: (abs1_var, abstr(t2)) :)))
               (ext((: (abs1_var, abstr(t3)) :))(body(t3)))")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     2)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "alpha_fresh_invariance")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "ext_append"
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "Delta"
                                                                                           "(: (abstr(t2), abstr(t3)) :)"
                                                                                           "append(reverse((: (abs1_var, abstr(t2)) :)),
                       (: (abs1_var, abstr(t3)) :))"
                                                                                           "body(t3)")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "a")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "ds")
                                                                                                    (("1"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "reverse"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "reverse"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "append"
                                                                                                               1
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "append"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "append")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "act"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (reveal
                                                                                                                       -9
                                                                                                                       4
                                                                                                                       5
                                                                                                                       6)
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        (("1"
                                                                                                                          (reveal
                                                                                                                           -10)
                                                                                                                          (("1"
                                                                                                                            (reveal
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -3
                                                                                                                               -4
                                                                                                                               1
                                                                                                                               2
                                                                                                                               3)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "alpha_preserves_fresh")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "Delta"
                                                                                                                                   "abs1_var"
                                                                                                                                   "ext((: (abstr(t2), abstr(t3)) :))(body(t3))"
                                                                                                                                   "body(t2)")
                                                                                                                                  (("1"
                                                                                                                                    (prop)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1
                                                                                                                                       -3)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (hide
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "ext_reverse_fresh")
                                                                                                                                            (("1"
                                                                                                                                              (inst?
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (reveal
                                                                                                                                                     4
                                                                                                                                                     5
                                                                                                                                                     6)
                                                                                                                                                    (("1"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -1
                                                                                 2)
                                                                                (("2"
                                                                                  (reveal
                                                                                   -5)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "alpha_size")
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("2"
                                                                                        (prop)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "ext_preserves_size")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1
                                                                                               1
                                                                                               rl)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1 -2 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -3 -4 2) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -3 2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skolem 1 ("f" "ag"))
        (("6" (flatten)
          (("6" (hide -1)
            (("6" (skeep)
              (("6" (case "app?(t2)")
                (("1" (lemma "term_app_eta")
                  (("1" (inst? -1)
                    (("1" (case "app?(t3)")
                      (("1" (lemma "term_app_eta")
                        (("1" (inst -1 "t3")
                          (("1" (replace -1 -7 rl)
                            (("1" (replace -1 1 rl)
                              (("1"
                                (replace -3 -6 rl)
                                (("1"
                                  (replace -3 -7 rl)
                                  (("1"
                                    (hide -1 -2 -3 -4)
                                    (("1"
                                      (expand "alpha" 1)
                                      (("1"
                                        (expand "alpha" -2)
                                        (("1"
                                          (expand "alpha" -3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide -2 -4)
                                                (("2"
                                                  (inst -1 "ag")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "Delta"
                                                       "arg(t2)"
                                                       "arg(t3)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1 -5 rl)
                        (("2" (hide -1 -3 -4 2) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 -3 2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skolem 1 ("f" "ag"))
        (("7" (flatten)
          (("7" (hide -1)
            (("7" (skeep)
              (("7" (case "c_app?(t2)")
                (("1" (lemma "term_c_app_eta")
                  (("1" (inst -1 "t2")
                    (("1" (replace -1 -4 rl)
                      (("1" (replace -1 -5 rl)
                        (("1" (hide -1 -2)
                          (("1" (case "c_app?(t3)")
                            (("1" (lemma "term_c_app_eta")
                              (("1"
                                (inst -1 "t3")
                                (("1"
                                  (replace -1 -5 rl)
                                  (("1"
                                    (replace -1 1 rl)
                                    (("1"
                                      (hide -1 -2)
                                      (("1"
                                        (expand "alpha" 1)
                                        (("1"
                                          (case
                                           "ag = pair(term1(ag), term2(ag))")
                                          (("1"
                                            (case
                                             "c_arg(t2) = pair(term1(c_arg(t2)), term2(c_arg(t2)))")
                                            (("1"
                                              (case
                                               "c_arg(t3) = pair(term1(c_arg(t3)), term2(c_arg(t3)))")
                                              (("1"
                                                (hide -1 -2 -3 -4)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand "alpha")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "alpha"
                                                       -1)
                                                      (("2"
                                                        (expand
                                                         "alpha"
                                                         -2)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide
                                                             -1
                                                             -3)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (hide
                                                                 -2
                                                                 -4
                                                                 1)
                                                                (("1"
                                                                  (reveal
                                                                   -8)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 -4
                                                                 2)
                                                                (("2"
                                                                  (reveal
                                                                   -8)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide
                                                                 -1
                                                                 -4
                                                                 2)
                                                                (("3"
                                                                  (reveal
                                                                   -8)
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide
                                                                 -1
                                                                 -4
                                                                 1)
                                                                (("4"
                                                                  (reveal
                                                                   -8)
                                                                  (("4"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (hide
                                                                 -2
                                                                 -4
                                                                 1)
                                                                (("5"
                                                                  (reveal
                                                                   -8)
                                                                  (("5"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (hide
                                                                 -1
                                                                 -3
                                                                 2)
                                                                (("6"
                                                                  (reveal
                                                                   -8)
                                                                  (("6"
                                                                    (inst
                                                                     -1
                                                                     "term2(ag)")
                                                                    (("6"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("7"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 2)
                                                                (("7"
                                                                  (reveal
                                                                   -8)
                                                                  (("7"
                                                                    (inst
                                                                     -1
                                                                     "term2(ag)")
                                                                    (("7"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("8"
                                                                (hide
                                                                 -1
                                                                 -4
                                                                 1)
                                                                (("8"
                                                                  (reveal
                                                                   -8)
                                                                  (("8"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("9"
                                                                (hide
                                                                 -1
                                                                 -3
                                                                 1)
                                                                (("9"
                                                                  (reveal
                                                                   -8)
                                                                  (("9"
                                                                    (inst
                                                                     -1
                                                                     "term2(ag)")
                                                                    (("9"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("10"
                                                                (hide
                                                                 -2
                                                                 -4
                                                                 2)
                                                                (("10"
                                                                  (reveal
                                                                   -8)
                                                                  (("10"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("11"
                                                                (hide
                                                                 -1
                                                                 -4
                                                                 2)
                                                                (("11"
                                                                  (reveal
                                                                   -8)
                                                                  (("11"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("12"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 1)
                                                                (("12"
                                                                  (reveal
                                                                   -8)
                                                                  (("12"
                                                                    (inst
                                                                     -1
                                                                     "term2(ag)")
                                                                    (("12"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("13"
                                                                (hide
                                                                 -1
                                                                 -3
                                                                 1)
                                                                (("13"
                                                                  (reveal
                                                                   -8)
                                                                  (("13"
                                                                    (inst
                                                                     -1
                                                                     "term2(ag)")
                                                                    (("13"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("14"
                                                                (hide
                                                                 -1
                                                                 -3
                                                                 2)
                                                                (("14"
                                                                  (reveal
                                                                   -8)
                                                                  (("14"
                                                                    (inst
                                                                     -1
                                                                     "term2(ag)")
                                                                    (("14"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("15"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 2)
                                                                (("15"
                                                                  (reveal
                                                                   -8)
                                                                  (("15"
                                                                    (inst
                                                                     -1
                                                                     "term2(ag)")
                                                                    (("15"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         2)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("16"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 1)
                                                                (("16"
                                                                  (reveal
                                                                   -8)
                                                                  (("16"
                                                                    (inst
                                                                     -1
                                                                     "term2(ag)")
                                                                    (("16"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         2)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (typepred
                                                   "c_arg(t3)")
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (lemma
                                                       "term_pair_eta")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "c_arg(t3)")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (typepred "c_arg(t2)")
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "term_pair_eta")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (typepred "ag")
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (lemma
                                                   "term_pair_eta")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 -2 2)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 -3 2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term_induction formula-decl nil term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (susp? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (a skolem-const-decl "(ds(pm, p(t3)))" alpha_equivalence nil)
    (t3 skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (t2 skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (pm skolem-const-decl "perm" alpha_equivalence nil)
    (set type-eq-decl nil sets nil)
    (ds const-decl "set[atom]" atoms nil)
    (p adt-accessor-decl "[(susp?) -> perm]" term_adt nil)
    (term_times_eta formula-decl nil term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (pair adt-constructor-decl "[[term, term] -> (pair?)]" term_adt
     nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (t2 skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (t3 skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ext def-decl "term" nominal_term nil)
    (append def-decl "list[T]" list_props nil)
    (alpha_ext_invariance_left formula-decl nil alpha_equivalence nil)
    (act def-decl "atom" atoms nil)
    (alpha_ext_invariance_right formula-decl nil alpha_equivalence nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext_reverse_alpha formula-decl nil alpha_equivalence nil)
    (alpha_preserves_fresh formula-decl nil alpha_equivalence nil)
    (ext_reverse_fresh formula-decl nil freshness nil)
    (ext_preserves_alpha formula-decl nil alpha_equivalence nil)
    (alpha_fresh_invariance formula-decl nil alpha_equivalence nil)
    (ext_append formula-decl nil nominal_term nil)
    (ext_preserves_size formula-decl nil nominal_term nil)
    (alpha_size formula-decl nil alpha_equivalence nil)
    (term_abs_eta formula-decl nil term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (t3 skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (t2 skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_c_app_eta formula-decl nil term_adt nil)
    (c_arg adt-accessor-decl "[(c_app?) -> pair]" term_adt nil)
    (t3 skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (t2 skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (c_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (alpha def-decl "bool" alpha_equivalence nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_term nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_term nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (alpha_transitive-1 nil 3624718461
   ("" (induct t1)
    (("1" (grind) nil nil)
     ("2" (grind)
      (("1" (reveal (-1 -2))
        (("1" (inst -1 a!1)
          (("1" (inst -2 a!1)
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (reveal (-1 -2))
        (("2" (inst -1 a!1)
          (("2" (inst -2 a!1)
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("3" (reveal (-1 -2))
        (("3" (inst -2 a!1) (("3" (assert) nil nil)) nil)) nil))
      nil)
     ("3" (grind) nil nil)
     ("4" (grind)
      (("1" (hide -1 -2 -3 -4 -5 -6)
        (("1" (reveal -7)
          (("1" (inst -1 delta!1 "term2(t2!1)" "term2(t3!1)")
            (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (hide -1 -2 -3 -4 -5 -6)
        (("2" (reveal -7)
          (("2" (inst -1 delta!1 "term2(t2!1)" "term2(t3!1)")
            (("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("3" (hide -1 -2 -3 -4 -5 -6)
        (("3" (reveal -8)
          (("3" (inst -1 delta!1 "term1(t2!1)" "term1(t3!1)")
            (("3" (assert) nil nil)) nil))
          nil))
        nil)
       ("4" (hide -1 -2 -3 -4 -5 -6)
        (("4" (reveal -8)
          (("4" (inst -1 delta!1 "term1(t2!1)" "term1(t3!1)")
            (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (skeep*)
      (("5" (expand alpha (-2 -3 1))
        (("5" (flatten)
          (("5" (assert)
            (("5" (flatten)
              (("5" (assert)
                (("5" (split -3)
                  (("1" (split -5)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (inst -5 delta "body(t2)" "body(t3)")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2"
                          (inst -5 "Delta" "body(t2)"
                           "ext((: (abs1_var, abstr(t3)) :))(body(t3))")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split -5)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1"
                          (lemma alpha_preserves_fresh
                           (delta delta a abs1_var t "body(t2)" s
                            "body(t3)"))
                          (("1" (assert)
                            (("1"
                              (inst -6 delta
                               "ext((: (abs1_var, abstr(t3)) :))(body(t2))"
                               "ext((: (abs1_var, abstr(t3)) :))(body(t3))")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite ext_preserves_alpha)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split 3)
                        (("1" (flatten)
                          (("1"
                            (inst -6 delta
                             "ext((: (abstr(t3), abstr(t2)) :))(body(t2))"
                             "body(t3)")
                            (("1" (assert)
                              (("1"
                                (lemma
                                 ext_preserves_alpha
                                 (delta
                                  delta
                                  pi
                                  "(: (abstr(t3), abstr(t2)) :)"
                                  t
                                  "body(t2)"
                                  s
                                  "ext((: (abstr(t2), abstr(t3)) :))(body(t3))"))
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma alpha_ext_invariance_right)
                                    (("1"
                                      (inst
                                       -1
                                       delta
                                       "append((: (abstr(t3), abstr(t2)) :),(: (abstr(t2), abstr(t3)) :))"
                                       "(::)"
                                       "body(t3)"
                                       "ext((: (abstr(t3), abstr(t2)) :))(body(t2))")
                                      (("1"
                                        (rewrite ext_identity)
                                        (("1"
                                          (rewrite ext_append)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide-all-but 1)
                                              (("1"
                                                (decompose-equality 1)
                                                (("1"
                                                  (rewrite act_append)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2"
                            (lemma alpha_preserves_fresh
                             (delta delta a "abs1_var" t "body(t2)" s
                              "ext((: (abstr(t2), abstr(t3)) :))(body(t3))"))
                            (("2" (assert)
                              (("2"
                                (lemma
                                 ext_reverse_fresh
                                 (delta
                                  delta
                                  a
                                  "abs1_var"
                                  pi
                                  "(: (abstr(t2), abstr(t3)) :)"
                                  t
                                  "body(t3)"))
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand* reverse reverse)
                                    (("2"
                                      (expand append)
                                      (("2"
                                        (expand act -1)
                                        (("2"
                                          (expand act -1)
                                          (("2"
                                            (lemma
                                             ext_preserves_alpha
                                             (delta
                                              delta
                                              pi
                                              "(: (abs1_var, abstr(t2)) :)"
                                              t
                                              "body(t2)"
                                              s
                                              "ext((: (abstr(t2), abstr(t3)) :))(body(t3))"))
                                            (("2"
                                              (inst-cp
                                               -8
                                               delta
                                               "ext((: (abs1_var, abstr(t2)) :))(body(t2))"
                                               "ext((: (abs1_var, abstr(t2)) :))(ext((: (abstr(t2), abstr(t3)) :))(body(t3)))")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   -8
                                                   delta
                                                   "ext((: (abs1_var, abstr(t2)) :))(ext((: (abstr(t2), abstr(t3)) :))(body(t3)))"
                                                   "ext((: (abs1_var, abstr(t3)) :))(body(t3))")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       alpha_fresh_invariance
                                                       (delta
                                                        delta
                                                        pi1
                                                        "append((: (abs1_var, abstr(t2)) :),(: (abstr(t2), abstr(t3)) :))"
                                                        pi2
                                                        "(: (abs1_var, abstr(t3)) :)"
                                                        t
                                                        "body(t3)"))
                                                      (("2"
                                                        (rewrite
                                                         ext_append
                                                         -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (typepred
                                                               a)
                                                              (("2"
                                                                (expand
                                                                 ds)
                                                                (("2"
                                                                  (rewrite
                                                                   act_append)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -3
                                                                      -5
                                                                      1
                                                                      2
                                                                      4
                                                                      5))
                                                                    (("2"
                                                                      (expand*
                                                                       act
                                                                       act)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind)
      (("6" (hide -1 -2 -3)
        (("6" (reveal -4)
          (("6" (inst -1 delta!1 "arg(t2!1)" "arg(t3!1)")
            (("6" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (alpha_symmetric 0
  (alpha_symmetric-2 nil 3745915598
   ("" (measure-induct "size(t)" "t")
    (("" (induct "x")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (hide -1)
            (("1" (expand "alpha" 1)
              (("1" (assert)
                (("1" (grind)
                  (("1" (lemma "term_at_eta")
                    (("1" (inst? -1) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 ("pm" "V"))
        (("2" (flatten)
          (("2" (skeep)
            (("2" (expand "alpha" 1 1)
              (("2" (grind)
                (("1" (expand "alpha" -1)
                  (("1" (hide 2 3) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (hide 1)
                  (("2" (grind)
                    (("2" (expand "alpha" -1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 1)
                  (("3" (expand "alpha" -1) (("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (flatten)
        (("3" (hide -1)
          (("3" (grind)
            (("3" (hide -1)
              (("3" (expand "alpha" -1) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skolem 1 ("p1" "p2"))
        (("4" (flatten)
          (("4" (hide -1 -2)
            (("4" (skeep)
              (("4" (hide -1)
                (("4" (expand "alpha" 1 1)
                  (("4" (grind)
                    (("1" (reveal -1)
                      (("1" (inst -1 "p2")
                        (("1" (prop)
                          (("1" (inst? -1) (("1" (assert) nil nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (reveal -1)
                      (("2" (hide -4) (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (expand "alpha" -1)
                      (("3" (grind)
                        (("3" (reveal -1)
                          (("3" (hide -3)
                            (("3" (inst -1 "term2(s)")
                              (("3"
                                (prop)
                                (("1"
                                  (inst? -1)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide -1 2)
                                  (("2"
                                    (lemma "alpha_size")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand "alpha" -1)
                      (("4" (grind)
                        (("4" (hide -1 -3)
                          (("4" (reveal -3)
                            (("4" (inst -1 "p1")
                              (("4"
                                (prop)
                                (("1"
                                  (inst -1 "Delta" "term1(s)")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide -1 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (grind)
                      (("5" (expand "alpha" -1) (("5" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (hide -1)
          (("5" (skeep)
            (("5" (hide -1)
              (("5" (case "abs?(s)")
                (("1" (lemma "term_abs_eta")
                  (("1" (inst? -1)
                    (("1" (replace -1 1 rl)
                      (("1" (hide -1 -2)
                        (("1" (expand "alpha" 1)
                          (("1" (grind)
                            (("1" (reveal -4)
                              (("1"
                                (inst -1 "abs2_var")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst? -1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1)
                              (("2"
                                (reveal -5)
                                (("2"
                                  (inst -1 "abs2_var")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst? -1)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide -1 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (reveal -4)
                              (("3"
                                (inst -1 "abs2_var")
                                (("3"
                                  (prop)
                                  (("1"
                                    (inst
                                     -1
                                     "Delta"
                                     "ext((: (abs1_var, abstr(s)) :))(body(s))")
                                    (("1"
                                      (replace -1 -3)
                                      (("1"
                                        (hide -1 -2 1 2)
                                        (("1"
                                          (lemma "ext_reverse_alpha")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (replace -1 -2)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (lemma
                                                   "alpha_ext_invariance_right")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "(: (abstr(s), abs1_var) :)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide -1 2)
                                                          (("2"
                                                            (decompose-equality)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1 -2 2 3 4)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (lemma "alpha_preserves_fresh")
                              (("4"
                                (inst
                                 -1
                                 "Delta"
                                 "abstr(s)"
                                 "ext((: (abs1_var, abstr(s)) :))(body(s))"
                                 "abs2_var")
                                (("4"
                                  (prop)
                                  (("4"
                                    (replace -1 3)
                                    (("4"
                                      (hide -1 -3)
                                      (("4"
                                        (lemma "ext_reverse_fresh")
                                        (("4"
                                          (inst? -1)
                                          (("4"
                                            (replace -1 3)
                                            (("4"
                                              (hide -1)
                                              (("4" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (hide -1 1 3)
                              (("5"
                                (reveal -5)
                                (("5"
                                  (inst -1 "abs2_var")
                                  (("5"
                                    (prop)
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma "ext_reverse_alpha")
                                            (("1"
                                              (inst? -1)
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (lemma
                                                     "alpha_ext_invariance_right")
                                                    (("1"
                                                      (inst? -1)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "(: (abstr(s), abs1_var) :)")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide -1 2)
                                                            (("2"
                                                              (decompose-equality)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("6" (lemma "alpha_preserves_fresh")
                              (("6"
                                (inst
                                 -1
                                 "Delta"
                                 "abs1_var"
                                 "ext((: (abstr(s), abs1_var) :))(abs2_var)"
                                 "body(s)")
                                (("6"
                                  (prop)
                                  (("6"
                                    (replace -1 2)
                                    (("6"
                                      (hide -1 1 3)
                                      (("6"
                                        (hide -2)
                                        (("6"
                                          (lemma "ext_reverse_fresh")
                                          (("6"
                                            (inst? -1)
                                            (("6"
                                              (replace -1 1)
                                              (("6"
                                                (hide -1)
                                                (("6" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind)
                  (("2" (grind)
                    (("2" (expand "alpha") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skolem 1 ("f" "ag"))
        (("6" (flatten)
          (("6" (hide -1)
            (("6" (skeep)
              (("6" (hide -1)
                (("6" (grind)
                  (("1" (reveal -1)
                    (("1" (inst -1 "ag")
                      (("1" (prop)
                        (("1" (inst? -1) (("1" (assert) nil nil)) nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind)
                    (("2" (expand "alpha" -1)
                      (("2" (grind)
                        (("2" (hide -1 -2)
                          (("2" (reveal -3)
                            (("2" (inst -1 "ag")
                              (("2"
                                (prop)
                                (("1"
                                  (inst -1 "Delta" "arg(s)")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide -1 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (grind)
                    (("3" (expand "alpha" -1) (("3" (grind) nil nil))
                      nil))
                    nil)
                   ("4" (expand "alpha" -1) (("4" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skolem 1 ("f" "ag"))
        (("7" (flatten)
          (("7" (hide -1)
            (("7" (skeep)
              (("7" (case "c_app?(s)")
                (("1" (lemma "term_c_app_eta")
                  (("1" (inst -1 "s")
                    (("1" (replace -1 1 rl)
                      (("1" (hide -1 -2)
                        (("1" (expand "alpha" 1)
                          (("1"
                            (case "alpha(Delta)(term1(ag), term1(c_arg(s))) = alpha(Delta)(term1(c_arg(s)), term1(ag))")
                            (("1"
                              (case "alpha(Delta)(term2(ag), term2(c_arg(s))) = alpha(Delta)(term2(c_arg(s)), term2(ag))")
                              (("1"
                                (hide -3)
                                (("1"
                                  (case
                                   "alpha(Delta)(term1(ag), term2(c_arg(s))) = alpha(Delta)(term2(c_arg(s)), term1(ag))")
                                  (("1"
                                    (case
                                     "alpha(Delta)(term2(ag), term1(c_arg(s))) = alpha(Delta)(term1(c_arg(s)), term2(ag))")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (reveal -4)
                                        (("2"
                                          (inst -1 "term2(ag)")
                                          (("2"
                                            (prop)
                                            (("1" (inst? -1) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (reveal -3)
                                      (("2"
                                        (inst -1 "term1(ag)")
                                        (("2"
                                          (prop)
                                          (("1" (inst? -1) nil nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (reveal -2)
                                  (("2"
                                    (inst -1 "term2(ag)")
                                    (("2"
                                      (prop)
                                      (("1" (inst? -1) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (reveal -1)
                                (("2"
                                  (inst -1 "term1(ag)")
                                  (("2"
                                    (prop)
                                    (("1" (inst? -1) nil nil)
                                     ("2"
                                      (hide 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide -1 2)
                              (("3"
                                (reveal -3)
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1)
                  (("2" (grind)
                    (("2" (expand "alpha" -1)
                      (("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (term_induction formula-decl nil term_adt nil)
    (atom? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_at_eta formula-decl nil term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (susp?)]" term_adt
       nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (susp? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (p adt-accessor-decl "[(susp?) -> perm]" term_adt nil)
    (ds const-decl "set[atom]" atoms nil)
    (alpha_size formula-decl nil alpha_equivalence nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (term_abs_eta formula-decl nil term_adt nil)
    (alpha_preserves_fresh formula-decl nil alpha_equivalence nil)
    (ext_reverse_fresh formula-decl nil freshness nil)
    (ext_reverse_alpha formula-decl nil alpha_equivalence nil)
    (alpha_ext_invariance_right formula-decl nil alpha_equivalence nil)
    (act def-decl "atom" atoms nil)
    (append def-decl "list[T]" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "term" nominal_term nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (s skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_c_app_eta formula-decl nil term_adt nil)
    (c_arg adt-accessor-decl "[(c_app?) -> pair]" term_adt nil)
    (s skolem-const-decl
     "term[atom, perm, variable, symbol, commutative_symbol]"
     alpha_equivalence nil)
    (c_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (alpha def-decl "bool" alpha_equivalence nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_term nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_term nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (alpha_symmetric-1 nil 3625474085
   ("" (skolem 1 (delta "_" "_"))
    (("" (induct t)
      (("1" (grind)
        (("1" (expand alpha -3)
          (("1" (lift-if)
            (("1" (assert)
              (("1" (prop)
                (("1" (decompose-equality -2)
                  (("1" (decompose-equality 1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep*)
        (("2" (expand alpha)
          (("2" (iff)
            (("2" (split)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (inst -3 a)
                      (("1" (assert) nil nil)
                       ("2" (typepred a)
                        (("2" (expand ds) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (lift-if)
                  (("2" (assert)
                    (("2" (prop)
                      (("1" (assert) nil nil)
                       ("2" (skeep)
                        (("2" (typepred a)
                          (("2" (inst -4 a)
                            (("1" (assert) nil nil)
                             ("2" (expand ds) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind)
        (("3" (expand alpha)
          (("3" (lift-if) (("3" (assert) nil nil)) nil)) nil))
        nil)
       ("4" (skeep*)
        (("4" (expand alpha 1)
          (("4" (lift-if)
            (("4" (assert)
              (("4" (prop)
                (("4" (inst -2 "term1(s)")
                  (("4" (inst -3 "term2(s)")
                    (("4" (replaces -2) (("4" (replaces -2) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep*)
        (("5" (expand alpha 1)
          (("5" (lift-if)
            (("5" (assert)
              (("5" (prop)
                (("5" (lift-if)
                  (("5" (lift-if)
                    (("5" (lift-if)
                      (("5" (assert)
                        (("5" (prop)
                          (("1" (inst -3 "body(s)") nil nil)
                           ("2" (iff)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma
                                   ext_preserves_fresh
                                   (delta
                                    delta
                                    a
                                    "abs1_var"
                                    pi
                                    "(: (abs1_var, abstr(s)) :)"
                                    t
                                    "body(s)"))
                                  (("1"
                                    (expand* act act)
                                    (("1"
                                      (lemma
                                       alpha_preserves_fresh
                                       (delta
                                        delta
                                        a
                                        "abstr(s)"
                                        t
                                        "abs2_var"
                                        s
                                        "ext((: (abs1_var, abstr(s)) :))(body(s))"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           -6
                                           "ext((: (abs1_var, abstr(s)) :))(body(s))")
                                          (("1"
                                            (lemma
                                             ext_preserves_alpha
                                             (delta
                                              delta
                                              pi
                                              "(: (abstr(s), abs1_var) :)"
                                              t
                                              "ext((: (abs1_var, abstr(s)) :))(body(s))"
                                              s
                                              "abs2_var"))
                                            (("1"
                                              (lemma
                                               alpha_ext_invariance_left
                                               (delta
                                                delta
                                                pi1
                                                "append((: (abstr(s), abs1_var) :), (: (abs1_var, abstr(s)) :))"
                                                t
                                                "body(s)"
                                                s
                                                "ext((: (abstr(s), abs1_var) :))(abs2_var)"))
                                              (("1"
                                                (inst -1 "(::)")
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (rewrite
                                                     ext_append)
                                                    (("1"
                                                      (rewrite
                                                       ext_identity)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1 3))
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (rewrite
                                                         act_append)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (lemma
                                   ext_preserves_fresh
                                   (delta
                                    delta
                                    a
                                    "abstr(s)"
                                    pi
                                    "(: (abstr(s), abs1_var) :)"
                                    t
                                    "abs2_var"))
                                  (("2"
                                    (expand* act act)
                                    (("2"
                                      (lemma
                                       alpha_preserves_fresh
                                       (delta
                                        delta
                                        a
                                        "abs1_var"
                                        s
                                        "ext((: (abstr(s), abs1_var) :))(abs2_var)"
                                        t
                                        "body(s)"))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst
                                           -6
                                           "ext((: (abs1_var, abstr(s)) :))(body(s))")
                                          (("2"
                                            (lemma
                                             ext_preserves_alpha
                                             (delta
                                              delta
                                              pi
                                              "(: (abs1_var, abstr(s)) :)"
                                              t
                                              "body(s)"
                                              s
                                              "ext((: (abstr(s), abs1_var) :))(abs2_var)"))
                                            (("2"
                                              (lemma
                                               alpha_ext_invariance_right
                                               (delta
                                                delta
                                                pi1
                                                "append((: (abs1_var, abstr(s)) :), (: (abstr(s), abs1_var) :))"
                                                t
                                                "ext((: (abs1_var, abstr(s)) :))(body(s))"
                                                s
                                                "abs2_var"))
                                              (("2"
                                                (inst -1 "(::)")
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (rewrite
                                                     ext_append)
                                                    (("1"
                                                      (rewrite
                                                       ext_identity)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1 3))
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (rewrite
                                                         act_append)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skeep*)
        (("6" (expand alpha 1)
          (("6" (lift-if)
            (("6" (assert)
              (("6" (prop)
                (("6" (inst -1 "arg(s)")
                  (("1" (grind) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (alpha_weakening 0
  (alpha_weakening-2 nil 3745915719
   ("" (measure-induct "size(t)" "t")
    (("" (induct "x")
      (("1" (skeep) (("1" (hide -1) (("1" (grind) nil nil)) nil)) nil)
       ("2" (skolem 1 ("pm" "V"))
        (("2" (flatten)
          (("2" (hide -1)
            (("2" (skeep)
              (("2" (expand "alpha")
                (("2" (prop)
                  (("2" (hide -2 -3)
                    (("2" (skeep)
                      (("2" (inst -1 "(a, V)") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (flatten)
        (("3" (hide -1) (("3" (skeep) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("4" (skolem 1 ("p1" "p2"))
        (("4" (flatten)
          (("4" (hide -1 -2)
            (("4" (skeep)
              (("4" (expand "alpha" 1)
                (("4" (expand "alpha" -3)
                  (("4" (prop)
                    (("1" (hide -5)
                      (("1" (hide -3) (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (hide -3 -4)
                      (("2" (inst -1 "p2")
                        (("2" (prop)
                          (("1" (inst -1 "Delta" "Nabla" "term2(s)")
                            (("1" (prop) nil nil)) nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (hide -1)
          (("5" (skeep)
            (("5" (expand "alpha" 1)
              (("5" (expand "alpha" -3)
                (("5" (prop)
                  (("1" (hide -1 -2 -6)
                    (("1" (inst -2 "abs2_var")
                      (("1" (prop)
                        (("1" (inst? -1)
                          (("1" (inst? -1) (("1" (prop) nil nil)) nil))
                          nil)
                         ("2" (hide -1 -2 2) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -2 -3 -5 2 3)
                    (("2" (lemma "fresh_weakening")
                      (("2" (grind) nil nil)) nil))
                    nil)
                   ("3" (hide -1 -5 2 3)
                    (("3" (inst -2 "abs2_var")
                      (("3" (prop)
                        (("1" (inst? -1)
                          (("1" (inst? -1) (("1" (prop) nil nil)) nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skolem 1 ("f" "ag"))
        (("6" (flatten)
          (("6" (hide -1)
            (("6" (skeep)
              (("6" (expand "alpha" 1)
                (("6" (expand "alpha" -3)
                  (("6" (prop)
                    (("6" (inst -1 "ag")
                      (("6" (prop)
                        (("1" (inst? -1)
                          (("1" (inst? -1) (("1" (prop) nil nil)) nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skolem 1 ("f" "ag"))
        (("7" (flatten)
          (("7" (hide -1)
            (("7" (skeep)
              (("7" (expand "alpha" 1)
                (("7" (expand "alpha" -3)
                  (("7" (flatten)
                    (("7" (split 1)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (flatten)
                        (("3" (split -5)
                          (("1" (hide -4 -5)
                            (("1" (hide 2)
                              (("1"
                                (prop)
                                (("1"
                                  (inst -3 "term1(ag)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (inst? -1)
                                        (("1" (prop) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1)
                                  (("2"
                                    (inst -2 "term2(ag)")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (inst? -1)
                                          (("1" (prop) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 1)
                            (("2" (hide -4 -5)
                              (("2"
                                (prop)
                                (("1"
                                  (inst -3 "term1(ag)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (inst? -1)
                                        (("1" (prop) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -3 "term2(ag)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (inst? -1)
                                        (("1" (prop) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term_induction formula-decl nil term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (ds const-decl "set[atom]" atoms nil)
    (susp? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (p adt-accessor-decl "[(susp?) -> perm]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (fresh_weakening formula-decl nil freshness nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ext def-decl "term" nominal_term nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (c_arg adt-accessor-decl "[(c_app?) -> pair]" term_adt nil)
    (c_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (alpha def-decl "bool" alpha_equivalence nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" nominal_term nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_term nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (commutative_symbol type-eq-decl nil nominal_term nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (alpha_weakening-1 nil 3626442158
   ("" (induct t)
    (("1" (grind) nil nil)
     ("2" (grind)
      (("1" (reveal -2) (("1" (inst -1 a!1) nil nil)) nil)
       ("2" (reveal -2) (("2" (inst -1 a!1) nil nil)) nil))
      nil)
     ("3" (grind) nil nil)
     ("4" (skeep*)
      (("4" (expand alpha (-4 1))
        (("4" (flatten)
          (("4" (inst -1 delta nabla "term1(s)")
            (("4" (inst -2 delta nabla "term2(s)")
              (("4" (prop) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep*)
      (("5" (expand alpha (-3 1))
        (("5" (flatten)
          (("5" (split -4)
            (("1" (flatten)
              (("1" (assert)
                (("1" (inst -3 delta nabla "body(s)")
                  (("1" (prop) nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2"
                  (lemma fresh_weakening
                   (delta delta nabla nabla a "abs1_var" t "body(s)"))
                  (("2" (prop)
                    (("2"
                      (inst -4 delta nabla
                       "ext((: (abs1_var, abstr(s)) :))(body(s))")
                      (("2" (prop) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep*)
      (("6" (expand alpha (-3 1))
        (("6" (prop)
          (("6" (inst -1 delta nabla "arg(s)") (("6" (prop) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

