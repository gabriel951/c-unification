%%% ADT file generated from nominal_term

term_adt[atom: TYPE+, perm: TYPE+, variable: TYPE+, symbol: TYPE+,
         commutative_symbol: TYPE+]: THEORY
 BEGIN
  ASSUMING
   atom_TCC1: ASSUMPTION EXISTS (x: atom): TRUE;

   perm_TCC1: ASSUMPTION EXISTS (x: perm): TRUE;

   variable_TCC1: ASSUMPTION EXISTS (x: variable): TRUE;

   symbol_TCC1: ASSUMPTION EXISTS (x: symbol): TRUE;

   commutative_symbol_TCC1: ASSUMPTION EXISTS (x: commutative_symbol): TRUE;
  ENDASSUMING

  term: TYPE

  atom?, susp?, unit?, pair?, abs?, app?, c_app?: [term -> boolean]

  plain(x: term):  boolean =
          atom?(x) OR susp?(x) OR unit?(x) OR abs?(x) OR app?(x)
       OR c_app?(x);

  plain: TYPE =
        {x: term |
                     atom?(x) OR susp?(x) OR unit?(x) OR abs?(x) OR app?(x)
                  OR c_app?(x)}

  pair(x: term):  boolean = pair?(x);

  pair: TYPE = (pair?)

  JUDGEMENT (atom?) SUBTYPE_OF plain

  JUDGEMENT (susp?) SUBTYPE_OF plain

  JUDGEMENT (unit?) SUBTYPE_OF plain

  JUDGEMENT (abs?) SUBTYPE_OF plain

  JUDGEMENT (app?) SUBTYPE_OF plain

  JUDGEMENT (c_app?) SUBTYPE_OF plain

  a: [(atom?) -> atom]

  p: [(susp?) -> perm]

  V: [(susp?) -> variable]

  term1: [pair -> term]

  term2: [pair -> term]

  abstr: [(abs?) -> atom]

  body: [(abs?) -> term]

  sym: [(app?) -> symbol]

  arg: [(app?) -> term]

  c_sym: [(c_app?) -> commutative_symbol]

  c_arg: [(c_app?) -> pair]

  at: [atom -> (atom?)]

  *: [[perm, variable] -> (susp?)]

  unit: (unit?)

  pair: [[term, term] -> (pair?)]

  abs: [[atom, term] -> (abs?)]

  app: [[symbol, term] -> (app?)]

  c_app: [[commutative_symbol, pair] -> (c_app?)]

  term_ord: [term -> upto(6)]

  term_ord_defaxiom: AXIOM
         (FORALL (a: atom): term_ord(at(a)) = 0)
     AND (FORALL (p: perm, V: variable): term_ord(p * V) = 1)
     AND term_ord(unit) = 2
     AND (FORALL (term1: term, term2: term):
            term_ord(pair(term1, term2)) = 3)
     AND (FORALL (abstr: atom, body: term): term_ord(abs(abstr, body)) = 4)
     AND (FORALL (sym: symbol, arg: term): term_ord(app(sym, arg)) = 5)
     AND (FORALL (c_sym: commutative_symbol, c_arg: pair):
            term_ord(c_app(c_sym, c_arg)) = 6);

  ord(x: term): [term -> upto(6)] =
      CASES x
        OF at(at1_var): 0,
           *(times1_var, times2_var): 1,
           unit: 2,
           pair(pair1_var, pair2_var): 3,
           abs(abs1_var, abs2_var): 4,
           app(app1_var, app2_var): 5,
           c_app(c_app1_var, c_app2_var): 6
        ENDCASES

  term_at_extensionality: AXIOM
    FORALL (atom?_var: (atom?), atom?_var2: (atom?)):
      a(atom?_var) = a(atom?_var2) IMPLIES atom?_var = atom?_var2;

  term_at_eta: AXIOM
    FORALL (atom?_var: (atom?)): at(a(atom?_var)) = atom?_var;

  term_times_extensionality: AXIOM
    FORALL (susp?_var: (susp?), susp?_var2: (susp?)):
      p(susp?_var) = p(susp?_var2) AND V(susp?_var) = V(susp?_var2) IMPLIES
       susp?_var = susp?_var2;

  term_times_eta: AXIOM
    FORALL (susp?_var: (susp?)): p(susp?_var) * V(susp?_var) = susp?_var;

  term_unit_extensionality: AXIOM
    FORALL (unit?_var: (unit?), unit?_var2: (unit?)):
      unit?_var = unit?_var2;

  term_pair_extensionality: AXIOM
    FORALL (pair?_var: (pair?), pair?_var2: (pair?)):
      term1(pair?_var) = term1(pair?_var2) AND
       term2(pair?_var) = term2(pair?_var2)
       IMPLIES pair?_var = pair?_var2;

  term_pair_eta: AXIOM
    FORALL (pair?_var: (pair?)):
      pair(term1(pair?_var), term2(pair?_var)) = pair?_var;

  term_abs_extensionality: AXIOM
    FORALL (abs?_var: (abs?), abs?_var2: (abs?)):
      abstr(abs?_var) = abstr(abs?_var2) AND
       body(abs?_var) = body(abs?_var2)
       IMPLIES abs?_var = abs?_var2;

  term_abs_eta: AXIOM
    FORALL (abs?_var: (abs?)):
      abs(abstr(abs?_var), body(abs?_var)) = abs?_var;

  term_app_extensionality: AXIOM
    FORALL (app?_var: (app?), app?_var2: (app?)):
      sym(app?_var) = sym(app?_var2) AND arg(app?_var) = arg(app?_var2)
       IMPLIES app?_var = app?_var2;

  term_app_eta: AXIOM
    FORALL (app?_var: (app?)): app(sym(app?_var), arg(app?_var)) = app?_var;

  term_c_app_extensionality: AXIOM
    FORALL (c_app?_var: (c_app?), c_app?_var2: (c_app?)):
      c_sym(c_app?_var) = c_sym(c_app?_var2) AND
       c_arg(c_app?_var) = c_arg(c_app?_var2)
       IMPLIES c_app?_var = c_app?_var2;

  term_c_app_eta: AXIOM
    FORALL (c_app?_var: (c_app?)):
      c_app(c_sym(c_app?_var), c_arg(c_app?_var)) = c_app?_var;

  term_a_at: AXIOM FORALL (at1_var: atom): a(at(at1_var)) = at1_var;

  term_p_times: AXIOM
    FORALL (times1_var: perm, times2_var: variable):
      p(times1_var * times2_var) = times1_var;

  term_V_times: AXIOM
    FORALL (times1_var: perm, times2_var: variable):
      V(times1_var * times2_var) = times2_var;

  term_term1_pair: AXIOM
    FORALL (pair1_var: term, pair2_var: term):
      term1(pair(pair1_var, pair2_var):: (pair?)) = pair1_var;

  term_term2_pair: AXIOM
    FORALL (pair1_var: term, pair2_var: term):
      term2(pair(pair1_var, pair2_var):: (pair?)) = pair2_var;

  term_abstr_abs: AXIOM
    FORALL (abs1_var: atom, abs2_var: term):
      abstr(abs(abs1_var, abs2_var)) = abs1_var;

  term_body_abs: AXIOM
    FORALL (abs1_var: atom, abs2_var: term):
      body(abs(abs1_var, abs2_var)) = abs2_var;

  term_sym_app: AXIOM
    FORALL (app1_var: symbol, app2_var: term):
      sym(app(app1_var, app2_var)) = app1_var;

  term_arg_app: AXIOM
    FORALL (app1_var: symbol, app2_var: term):
      arg(app(app1_var, app2_var)) = app2_var;

  term_c_sym_c_app: AXIOM
    FORALL (c_app1_var: commutative_symbol, c_app2_var: pair):
      c_sym(c_app(c_app1_var, c_app2_var)) = c_app1_var;

  term_c_arg_c_app: AXIOM
    FORALL (c_app1_var: commutative_symbol, c_app2_var: pair):
      c_arg(c_app(c_app1_var, c_app2_var)) = c_app2_var;

  term_inclusive: AXIOM
    FORALL (term_var: term):
          atom?(term_var) OR susp?(term_var) OR unit?(term_var)
       OR pair?(term_var) OR abs?(term_var) OR app?(term_var)
       OR c_app?(term_var);

  term_induction: AXIOM
    FORALL (p1: [term -> boolean]):
      (     FORALL (at1_var: atom): p1(at(at1_var))
        AND FORALL (times1_var: perm, times2_var: variable):
              p1(times1_var * times2_var)
        AND p1(unit)
        AND FORALL (pair1_var: term, pair2_var: term):
              p1(pair1_var) AND p1(pair2_var) IMPLIES
               p1(pair(pair1_var, pair2_var))
        AND FORALL (abs1_var: atom, abs2_var: term):
              p1(abs2_var) IMPLIES p1(abs(abs1_var, abs2_var))
        AND FORALL (app1_var: symbol, app2_var: term):
              p1(app2_var) IMPLIES p1(app(app1_var, app2_var))
        AND FORALL (c_app1_var: commutative_symbol, c_app2_var: pair):
              p1(c_app2_var) IMPLIES p1(c_app(c_app1_var, c_app2_var)))
       IMPLIES (FORALL (term_var: term): p1(term_var));

  every(p1: PRED[atom], p2: PRED[perm], p3: PRED[variable],
        p4: PRED[symbol], p5: PRED[commutative_symbol])
       (a1: term):
        boolean =
      CASES a1
        OF at(at1_var): p1(at1_var),
           *(times1_var, times2_var): p2(times1_var) AND p3(times2_var),
           unit: TRUE,
           pair(pair1_var, pair2_var):
             every(p1, p2, p3, p4, p5)(pair1_var) AND
              every(p1, p2, p3, p4, p5)(pair2_var),
           abs(abs1_var, abs2_var):
             p1(abs1_var) AND every(p1, p2, p3, p4, p5)(abs2_var),
           app(app1_var, app2_var):
             p4(app1_var) AND every(p1, p2, p3, p4, p5)(app2_var),
           c_app(c_app1_var, c_app2_var):
             p5(c_app1_var) AND every(p1, p2, p3, p4, p5)(c_app2_var)
        ENDCASES;

  every(p1: PRED[atom], p2: PRED[perm], p3: PRED[variable],
        p4: PRED[symbol], p5: PRED[commutative_symbol], a1: term):
        boolean =
      CASES a1
        OF at(at1_var): p1(at1_var),
           *(times1_var, times2_var): p2(times1_var) AND p3(times2_var),
           unit: TRUE,
           pair(pair1_var, pair2_var):
             every(p1, p2, p3, p4, p5, pair1_var) AND
              every(p1, p2, p3, p4, p5, pair2_var),
           abs(abs1_var, abs2_var):
             p1(abs1_var) AND every(p1, p2, p3, p4, p5, abs2_var),
           app(app1_var, app2_var):
             p4(app1_var) AND every(p1, p2, p3, p4, p5, app2_var),
           c_app(c_app1_var, c_app2_var):
             p5(c_app1_var) AND every(p1, p2, p3, p4, p5, c_app2_var)
        ENDCASES;

  some(p1: PRED[atom], p2: PRED[perm], p3: PRED[variable],
       p4: PRED[symbol], p5: PRED[commutative_symbol])
      (a1: term):
        boolean =
      CASES a1
        OF at(at1_var): p1(at1_var),
           *(times1_var, times2_var): p2(times1_var) OR p3(times2_var),
           unit: FALSE,
           pair(pair1_var, pair2_var):
             some(p1, p2, p3, p4, p5)(pair1_var) OR
              some(p1, p2, p3, p4, p5)(pair2_var),
           abs(abs1_var, abs2_var):
             p1(abs1_var) OR some(p1, p2, p3, p4, p5)(abs2_var),
           app(app1_var, app2_var):
             p4(app1_var) OR some(p1, p2, p3, p4, p5)(app2_var),
           c_app(c_app1_var, c_app2_var):
             p5(c_app1_var) OR some(p1, p2, p3, p4, p5)(c_app2_var)
        ENDCASES;

  some(p1: PRED[atom], p2: PRED[perm], p3: PRED[variable],
       p4: PRED[symbol], p5: PRED[commutative_symbol], a1: term):
        boolean =
      CASES a1
        OF at(at1_var): p1(at1_var),
           *(times1_var, times2_var): p2(times1_var) OR p3(times2_var),
           unit: FALSE,
           pair(pair1_var, pair2_var):
             some(p1, p2, p3, p4, p5, pair1_var) OR
              some(p1, p2, p3, p4, p5, pair2_var),
           abs(abs1_var, abs2_var):
             p1(abs1_var) OR some(p1, p2, p3, p4, p5, abs2_var),
           app(app1_var, app2_var):
             p4(app1_var) OR some(p1, p2, p3, p4, p5, app2_var),
           c_app(c_app1_var, c_app2_var):
             p5(c_app1_var) OR some(p1, p2, p3, p4, p5, c_app2_var)
        ENDCASES;

  subterm(x: term, y: term):  boolean =
      x = y OR
       CASES y
         OF at(at1_var): FALSE,
            *(times1_var, times2_var): FALSE,
            unit: FALSE,
            pair(pair1_var, pair2_var):
              subterm(x, pair1_var) OR subterm(x, pair2_var),
            abs(abs1_var, abs2_var): subterm(x, abs2_var),
            app(app1_var, app2_var): subterm(x, app2_var),
            c_app(c_app1_var, c_app2_var): subterm(x, c_app2_var)
         ENDCASES;

  <<:  (strict_well_founded?[term]) =
      LAMBDA (x, y: term):
        CASES y
          OF at(at1_var): FALSE,
             *(times1_var, times2_var): FALSE,
             unit: FALSE,
             pair(pair1_var, pair2_var):
               (x = pair1_var OR x << pair1_var) OR
                x = pair2_var OR x << pair2_var,
             abs(abs1_var, abs2_var): x = abs2_var OR x << abs2_var,
             app(app1_var, app2_var): x = app2_var OR x << app2_var,
             c_app(c_app1_var, c_app2_var):
               x = c_app2_var OR x << c_app2_var
          ENDCASES;

  term_well_founded: AXIOM strict_well_founded?[term](<<);

  reduce_nat(atom?_fun: [atom -> nat],
             susp?_fun: [[perm, variable] -> nat], unit?_fun: nat,
             pair?_fun: [[nat, nat] -> nat],
             abs?_fun: [[atom, nat] -> nat],
             app?_fun: [[symbol, nat] -> nat],
             c_app?_fun: [[commutative_symbol, nat] -> nat]):
        [term -> nat] =
      LAMBDA (term_adtvar: term):
        LET red: [term -> nat] =
              reduce_nat(atom?_fun, susp?_fun, unit?_fun, pair?_fun,
                         abs?_fun, app?_fun, c_app?_fun)
          IN
          CASES term_adtvar
            OF at(at1_var): atom?_fun(at1_var),
               *(times1_var, times2_var):
                 susp?_fun(times1_var, times2_var),
               unit: unit?_fun,
               pair(pair1_var, pair2_var):
                 pair?_fun(red(pair1_var), red(pair2_var)),
               abs(abs1_var, abs2_var): abs?_fun(abs1_var, red(abs2_var)),
               app(app1_var, app2_var): app?_fun(app1_var, red(app2_var)),
               c_app(c_app1_var, c_app2_var):
                 c_app?_fun(c_app1_var, red(c_app2_var))
            ENDCASES;

  REDUCE_nat(atom?_fun: [[atom, term] -> nat],
             susp?_fun: [[perm, variable, term] -> nat],
             unit?_fun: [term -> nat],
             pair?_fun: [[nat, nat, term] -> nat],
             abs?_fun: [[atom, nat, term] -> nat],
             app?_fun: [[symbol, nat, term] -> nat],
             c_app?_fun: [[commutative_symbol, nat, term] -> nat]):
        [term -> nat] =
      LAMBDA (term_adtvar: term):
        LET red: [term -> nat] =
              REDUCE_nat(atom?_fun, susp?_fun, unit?_fun, pair?_fun,
                         abs?_fun, app?_fun, c_app?_fun)
          IN
          CASES term_adtvar
            OF at(at1_var): atom?_fun(at1_var, term_adtvar),
               *(times1_var, times2_var):
                 susp?_fun(times1_var, times2_var, term_adtvar),
               unit: unit?_fun(term_adtvar),
               pair(pair1_var, pair2_var):
                 pair?_fun(red(pair1_var), red(pair2_var), term_adtvar),
               abs(abs1_var, abs2_var):
                 abs?_fun(abs1_var, red(abs2_var), term_adtvar),
               app(app1_var, app2_var):
                 app?_fun(app1_var, red(app2_var), term_adtvar),
               c_app(c_app1_var, c_app2_var):
                 c_app?_fun(c_app1_var, red(c_app2_var), term_adtvar)
            ENDCASES;

  reduce_ordinal(atom?_fun: [atom -> ordinal],
                 susp?_fun: [[perm, variable] -> ordinal],
                 unit?_fun: ordinal,
                 pair?_fun: [[ordinal, ordinal] -> ordinal],
                 abs?_fun: [[atom, ordinal] -> ordinal],
                 app?_fun: [[symbol, ordinal] -> ordinal],
                 c_app?_fun: [[commutative_symbol, ordinal] -> ordinal]):
        [term -> ordinal] =
      LAMBDA (term_adtvar: term):
        LET red: [term -> ordinal] =
              reduce_ordinal(atom?_fun, susp?_fun, unit?_fun, pair?_fun,
                             abs?_fun, app?_fun, c_app?_fun)
          IN
          CASES term_adtvar
            OF at(at1_var): atom?_fun(at1_var),
               *(times1_var, times2_var):
                 susp?_fun(times1_var, times2_var),
               unit: unit?_fun,
               pair(pair1_var, pair2_var):
                 pair?_fun(red(pair1_var), red(pair2_var)),
               abs(abs1_var, abs2_var): abs?_fun(abs1_var, red(abs2_var)),
               app(app1_var, app2_var): app?_fun(app1_var, red(app2_var)),
               c_app(c_app1_var, c_app2_var):
                 c_app?_fun(c_app1_var, red(c_app2_var))
            ENDCASES;

  REDUCE_ordinal(atom?_fun: [[atom, term] -> ordinal],
                 susp?_fun: [[perm, variable, term] -> ordinal],
                 unit?_fun: [term -> ordinal],
                 pair?_fun: [[ordinal, ordinal, term] -> ordinal],
                 abs?_fun: [[atom, ordinal, term] -> ordinal],
                 app?_fun: [[symbol, ordinal, term] -> ordinal],
                 c_app?_fun:
                   [[commutative_symbol, ordinal, term] -> ordinal]):
        [term -> ordinal] =
      LAMBDA (term_adtvar: term):
        LET red: [term -> ordinal] =
              REDUCE_ordinal(atom?_fun, susp?_fun, unit?_fun, pair?_fun,
                             abs?_fun, app?_fun, c_app?_fun)
          IN
          CASES term_adtvar
            OF at(at1_var): atom?_fun(at1_var, term_adtvar),
               *(times1_var, times2_var):
                 susp?_fun(times1_var, times2_var, term_adtvar),
               unit: unit?_fun(term_adtvar),
               pair(pair1_var, pair2_var):
                 pair?_fun(red(pair1_var), red(pair2_var), term_adtvar),
               abs(abs1_var, abs2_var):
                 abs?_fun(abs1_var, red(abs2_var), term_adtvar),
               app(app1_var, app2_var):
                 app?_fun(app1_var, red(app2_var), term_adtvar),
               c_app(c_app1_var, c_app2_var):
                 c_app?_fun(c_app1_var, red(c_app2_var), term_adtvar)
            ENDCASES;
 END term_adt

term_adt_map[atom: TYPE+, perm: TYPE+, variable: TYPE+, symbol: TYPE+,
             commutative_symbol: TYPE+, atom1: TYPE+, perm1: TYPE+,
             variable1: TYPE+, symbol1: TYPE+,
             commutative_symbol1: TYPE+]: THEORY
 BEGIN
  ASSUMING
   atom_TCC1: ASSUMPTION EXISTS (x: atom): TRUE;

   perm_TCC1: ASSUMPTION EXISTS (x: perm): TRUE;

   variable_TCC1: ASSUMPTION EXISTS (x: variable): TRUE;

   symbol_TCC1: ASSUMPTION EXISTS (x: symbol): TRUE;

   commutative_symbol_TCC1: ASSUMPTION EXISTS (x: commutative_symbol): TRUE;

   atom1_TCC1: ASSUMPTION EXISTS (x: atom1): TRUE;

   perm1_TCC1: ASSUMPTION EXISTS (x: perm1): TRUE;

   variable1_TCC1: ASSUMPTION EXISTS (x: variable1): TRUE;

   symbol1_TCC1: ASSUMPTION EXISTS (x: symbol1): TRUE;

   commutative_symbol1_TCC1: ASSUMPTION
     EXISTS (x: commutative_symbol1): TRUE;
  ENDASSUMING

  IMPORTING term_adt

  map(f1: [atom -> atom1], f2: [perm -> perm1],
      f3: [variable -> variable1], f4: [symbol -> symbol1],
      f5: [commutative_symbol -> commutative_symbol1])
     (a1: term[atom, perm, variable, symbol, commutative_symbol]):
        {x: term[atom1, perm1, variable1, symbol1, commutative_symbol1] |
                 (pair?(a1) => pair?(x))} =
      CASES a1
        OF at(at1_var): at(f1(at1_var)),
           *(times1_var, times2_var): f2(times1_var) * f3(times2_var),
           unit: unit,
           pair(pair1_var, pair2_var):
             pair(map(f1, f2, f3, f4, f5)(pair1_var),
                  map(f1, f2, f3, f4, f5)(pair2_var)),
           abs(abs1_var, abs2_var):
             abs(f1(abs1_var), map(f1, f2, f3, f4, f5)(abs2_var)),
           app(app1_var, app2_var):
             app(f4(app1_var), map(f1, f2, f3, f4, f5)(app2_var)),
           c_app(c_app1_var, c_app2_var):
             c_app(f5(c_app1_var), map(f1, f2, f3, f4, f5)(c_app2_var))
        ENDCASES;

  map(f1: [atom -> atom1], f2: [perm -> perm1],
      f3: [variable -> variable1], f4: [symbol -> symbol1],
      f5: [commutative_symbol -> commutative_symbol1],
      a1: term[atom, perm, variable, symbol, commutative_symbol]):
        {x: term[atom1, perm1, variable1, symbol1, commutative_symbol1] |
                 (pair?(a1) => pair?(x))} =
      CASES a1
        OF at(at1_var): at(f1(at1_var)),
           *(times1_var, times2_var): f2(times1_var) * f3(times2_var),
           unit: unit,
           pair(pair1_var, pair2_var):
             pair(map(f1, f2, f3, f4, f5, pair1_var),
                  map(f1, f2, f3, f4, f5, pair2_var)),
           abs(abs1_var, abs2_var):
             abs(f1(abs1_var), map(f1, f2, f3, f4, f5, abs2_var)),
           app(app1_var, app2_var):
             app(f4(app1_var), map(f1, f2, f3, f4, f5, app2_var)),
           c_app(c_app1_var, c_app2_var):
             c_app(f5(c_app1_var), map(f1, f2, f3, f4, f5, c_app2_var))
        ENDCASES;

  every(R1: [[atom, atom1] -> boolean], R2: [[perm, perm1] -> boolean],
        R3: [[variable, variable1] -> boolean],
        R4: [[symbol, symbol1] -> boolean],
        R5: [[commutative_symbol, commutative_symbol1] -> boolean])
       (x: term[atom, perm, variable, symbol, commutative_symbol],
        y: term[atom1, perm1, variable1, symbol1, commutative_symbol1]):
        boolean =
          atom?(x) AND atom?(y) AND R1(a(x), a(y))
       OR susp?(x) AND susp?(y) AND R2(p(x), p(y)) AND R3(V(x), V(y))
       OR unit?(x) AND unit?(y)
       OR pair?(x) AND
           pair?(y) AND
            every(R1, R2, R3, R4, R5)(term1(x), term1(y)) AND
             every(R1, R2, R3, R4, R5)(term2(x), term2(y))
       OR abs?(x) AND
           abs?(y) AND
            R1(abstr(x), abstr(y)) AND
             every(R1, R2, R3, R4, R5)(body(x), body(y))
       OR app?(x) AND
           app?(y) AND
            R4(sym(x), sym(y)) AND every(R1, R2, R3, R4, R5)(arg(x), arg(y))
       OR c_app?(x) AND
           c_app?(y) AND
            R5(c_sym(x), c_sym(y)) AND
             every(R1, R2, R3, R4, R5)(c_arg(x), c_arg(y));
 END term_adt_map

term_adt_reduce[atom: TYPE+, perm: TYPE+, variable: TYPE+, symbol: TYPE+,
                commutative_symbol: TYPE+, range: TYPE]: THEORY
 BEGIN
  ASSUMING
   atom_TCC1: ASSUMPTION EXISTS (x: atom): TRUE;

   perm_TCC1: ASSUMPTION EXISTS (x: perm): TRUE;

   variable_TCC1: ASSUMPTION EXISTS (x: variable): TRUE;

   symbol_TCC1: ASSUMPTION EXISTS (x: symbol): TRUE;

   commutative_symbol_TCC1: ASSUMPTION EXISTS (x: commutative_symbol): TRUE;
  ENDASSUMING

  IMPORTING term_adt[atom, perm, variable, symbol, commutative_symbol]

  reduce(atom?_fun: [atom -> range],
         susp?_fun: [[perm, variable] -> range], unit?_fun: range,
         pair?_fun: [[range, range] -> range],
         abs?_fun: [[atom, range] -> range],
         app?_fun: [[symbol, range] -> range],
         c_app?_fun: [[commutative_symbol, range] -> range]):
        [term[atom, perm, variable, symbol, commutative_symbol] -> range] =
      LAMBDA (term_adtvar:
                term[atom, perm, variable, symbol, commutative_symbol]):
        LET red:
              [term[atom, perm, variable, symbol, commutative_symbol] ->
                 range]
              =
              reduce(atom?_fun, susp?_fun, unit?_fun, pair?_fun, abs?_fun,
                     app?_fun, c_app?_fun)
          IN
          CASES term_adtvar
            OF at(at1_var): atom?_fun(at1_var),
               *(times1_var, times2_var):
                 susp?_fun(times1_var, times2_var),
               unit: unit?_fun,
               pair(pair1_var, pair2_var):
                 pair?_fun(red(pair1_var), red(pair2_var)),
               abs(abs1_var, abs2_var): abs?_fun(abs1_var, red(abs2_var)),
               app(app1_var, app2_var): app?_fun(app1_var, red(app2_var)),
               c_app(c_app1_var, c_app2_var):
                 c_app?_fun(c_app1_var, red(c_app2_var))
            ENDCASES;

  REDUCE(atom?_fun:
           [[atom,
             term[atom, perm, variable, symbol, commutative_symbol]] ->
              range],
         susp?_fun:
           [[perm, variable,
             term[atom, perm, variable, symbol, commutative_symbol]] ->
              range],
         unit?_fun:
           [term[atom, perm, variable, symbol, commutative_symbol] ->
              range],
         pair?_fun:
           [[range, range,
             term[atom, perm, variable, symbol, commutative_symbol]] ->
              range],
         abs?_fun:
           [[atom, range,
             term[atom, perm, variable, symbol, commutative_symbol]] ->
              range],
         app?_fun:
           [[symbol, range,
             term[atom, perm, variable, symbol, commutative_symbol]] ->
              range],
         c_app?_fun:
           [[commutative_symbol, range,
             term[atom, perm, variable, symbol, commutative_symbol]] ->
              range]):
        [term[atom, perm, variable, symbol, commutative_symbol] -> range] =
      LAMBDA (term_adtvar:
                term[atom, perm, variable, symbol, commutative_symbol]):
        LET red:
              [term[atom, perm, variable, symbol, commutative_symbol] ->
                 range]
              =
              REDUCE(atom?_fun, susp?_fun, unit?_fun, pair?_fun, abs?_fun,
                     app?_fun, c_app?_fun)
          IN
          CASES term_adtvar
            OF at(at1_var): atom?_fun(at1_var, term_adtvar),
               *(times1_var, times2_var):
                 susp?_fun(times1_var, times2_var, term_adtvar),
               unit: unit?_fun(term_adtvar),
               pair(pair1_var, pair2_var):
                 pair?_fun(red(pair1_var), red(pair2_var), term_adtvar),
               abs(abs1_var, abs2_var):
                 abs?_fun(abs1_var, red(abs2_var), term_adtvar),
               app(app1_var, app2_var):
                 app?_fun(app1_var, red(app2_var), term_adtvar),
               c_app(c_app1_var, c_app2_var):
                 c_app?_fun(c_app1_var, red(c_app2_var), term_adtvar)
            ENDCASES;
 END term_adt_reduce